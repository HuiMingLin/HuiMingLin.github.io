{"version":3,"sources":["webpack:///./pages/design-patterns/behavioral-type/behavioral-type.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName"],"mappings":"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","file":"static/js/pages-design-patterns-behavioral-type-behavioral-type.d072d8f5.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"概览\"}}>{`概览`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`行为型模式的目的就是封装对象的行为变化`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`这些设计模式特别关注对象之间的通信。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`责任链模式（Chain of Responsibility Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`命令模式（Command Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`解释器模式（Interpreter Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`迭代器模式（Iterator Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`中介者模式（Mediator Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`备忘录模式（Memento Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`观察者模式（Observer Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`状态模式（State Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`空对象模式（Null Object Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`策略模式（Strategy Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`模板模式（Template Pattern）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`访问者模式（Visitor Pattern）`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"策略模式\"}}>{`策略模式`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`策略模式的定义是:\n定义一系列的算法，将不变的部分和变化的部分隔开是每个设计模式的主题，\n策略模式也不例外，策略模式的目的就是将算法的使用与算法的实现分离开来。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体 的算法，并负责具体的计算过程。\n第二个部分是环境类 Context，Context 接受客户的请求，随后 把请求委托给某一个策略类。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var performanceS = function() {};\n  performanceS.prototype.calculate = function(salary) {\n    return salary * 4;\n  };\n\n  var performanceA = function() {};\n  performanceA.prototype.calculate = function(salary) {\n    return salary * 3;\n  };\n\n  var performanceB = function() {};\n  performanceB.prototype.calculate = function(salary) {\n    return salary * 2;\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`接下来定义奖金类 Bonus:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var Bonus = function() {\n    this.salary = null; // 原始工资\n    this.strategy = null; // 绩效等级对应的策略对象\n  };\n  Bonus.prototype.setSalary = function(salary) {\n    this.salary = salary; // 设置员工的原始工资\n  };\n  Bonus.prototype.setStrategy = function(strategy) {\n    this.strategy = strategy; // 设置员工绩效等级对应的策略对象\n  };\n  Bonus.prototype.getBonus = function() {\n    // 取得奖金数额\n    return this.strategy.calculate(this.salary); // 把计算奖金的操作委托给对应的策略对象\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`定义一系列的算法，把它们各自封装成策略类，算法被封装在策略类内部的方法里。\n在客户对 Context 发起请求的时候，Context 总是把请求委托给这些 策略对象中间的某一个进行计算。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在我们来完成这个例子中剩下的代码。先创建一个 bonus 对象，并且给 bonus 对象设置一些原始的数据，比如员工的原始工资数额。\n接下来把某个计算奖金的策略对象也传入 bonus 对象 内部保存起来。\n当调用 bonus.getBonus()来计算奖金的时候，bonus 对象本身并没有能力进行计算， 而是把请求委托给了之前保存好的策略对象:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var bonus = new Bonus();\n  bonus.setSalary(10000);\n\n  bonus.setStrategy(new performanceS()); // 设置策略对象\n  console.log(bonus.getBonus()); // 输出:40000\n\n  bonus.setStrategy( new performanceA() ); // 设置策略对象\n  console.log(bonus.getBonus()); // 输出:30000\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"javascript-版本的策略模式\"}}>{`JavaScript 版本的策略模式`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`实际上在 JavaScript 语言中，函数也是对象，所以更简单和直接的做法是把 strategy 直接定义为函数:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var strategies = {\n    S: function(salary) {\n      return salary * 4;\n    },\n    A: function(salary) {\n      return salary * 3;\n    },\n    B: function(salary) {\n      return salary * 2;\n    }\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`同样，Context 也没有必要必须用 Bonus 类来表示，我们依然用 calculateBonus 函数充当\nContext 来接受用户的请求。经过改造，代码的结构变得更加简洁:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var calculateBonus = function(level, salary) {\n    return strategies[level](salary);\n  };\n\n  console.log(calculateBonus(\"S\", 20000));  // 输出:80000\n  console.log(calculateBonus(\"A\", 10000));  // 输出:30000\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`另外一个例子: 动画`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var tween = {\n    linear: function(t, b, c, d) {\n      return (c * t) / d + b;\n    },\n    easeIn: function(t, b, c, d) {\n      return c * (t /= d) * t + b;\n    },\n    strongEaseIn: function(t, b, c, d) {\n      return c * (t /= d) * t * t * t;\n    },\n    strongEaseOut: function(t, b, c, d) {\n      return c * ((t = t / d - 1) * t);\n    },\n    sineaseIn: function(t, b, c, d) {\n      return c * (t /= d) * t * t + b;\n    },\n    sineaseOut: function(t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t + 1) + b;\n    }\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var Animate = function(dom) {\n    this.dom = dom; // 进行运动的 dom 节点\n    this.startTime = 0; // 动画开始时间\n    this.startPos = 0; // 动画开始时，dom 节点的位置，即 dom 的初始位置\n    this.endPos = 0; // 动画结束时，dom 节点的位置，即 dom 的目标位置\n    this.propertyName = null; // dom 节点需要被改变的 css 属性名\n    this.easing = null; // 缓动算法\n    this.duration = null; // 动画持续时间\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  Animate.prototype.start = function(\n    propertyName,\n    endPos,\n    duration,\n    easing\n  ) {\n    this.startTime = +new Date(); // 动画启动时间\n    this.startPos = this.dom.getBoundingClientRect()[propertyName]; // dom 节点初始位置\n    this.propertyName = propertyName; // dom 节点需要被改变的 CSS 属性名\n    this.endPos = endPos; // dom 节点目标位置\n    this.duration = duration; // 动画持续事件\n    this.easing = tween[easing]; // 缓动算法\n\n    var self = this;\n    var timeId = setInterval(function() {\n      // 启动定时器，开始执行动画\n      if (self.step() === false) {\n        // 如果动画已结束，则清除定时器\n        clearInterval(timeId);\n      }\n    }, 19);\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  Animate.prototype.step = function(\n    propertyName,\n    endPos,\n    duration,\n    easing\n  ) {\n    var t = +new Date(); // 取得当前时间\n    if (t >= this.startTime + this.duration) {\n      //\n      this.update(this.endPos); // 更新小球的 CSS 属性值\n      return false;\n    }\n\n    // 第一次调用\n    var pos = this.easing(\n      t - this.startTime,\n      this.startPos,\n      this.endPos - this.startPos,\n      this.duration\n    );\n    // pos 为小球当前位置\n    this.update(pos); // 更新小球的 CSS 属性值\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  Animate.prototype.update = function(pos) {\n    this.dom.style[this.propertyName] = pos + \"px\";\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var div = document.getElementById(\"div\");\n  var animate = new Animate(div);\n  animate.start(\"left\", 500, 10000, \"strongEaseOut\");\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`另一个例子: 表单验证`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`策略对象`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var strategies = {\n    isNonEmpty: function(value, errorMsg) {\n      // 不为空\n      if (value === \"\") {\n        return errorMsg;\n      }\n    },\n    minLength: function(value, length, errorMsg) {\n      if (value.length < length) {\n        // 限制最小长度\n        return errorMsg;\n      }\n    },\n    isMobile: function(value, errorMsg) {\n      // 手机号码格式\n      if (!/(^1[3|5|8][0-9]{9}\\$)/.test(value)) {\n        return errorMsg;\n      }\n    }\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Validator 类`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var Validator = function() {\n    this.cache = []; // 保存校验规则\n  };\n\n  Validator.prototype.add = function(dom, rules) {\n    var self = this;\n\n    for (var i = 0, rule; (rule = rules[i++]); ) {\n      (function(rule) {\n        var strategyAry = rule.strategy.split(\":\"); // 把 strategy 和参数分开\n        var errorMsg = rule.errorMsg;\n\n        self.cache.push(function() {\n          // 把校验的步骤用空函数包装起来，并且放入 cache\n          var strategy = strategyAry.shift(); //  用户挑选的 strategy\n          strategyAry.unshift(dom.value); // 把 input 的 value 添加进参数列表\n          strategyAry.push(errorMsg); // 把 errorMsg 添加进参数列表\n          return strategies[strategy].apply(dom, strategyAry);\n        });\n      })(rule);\n    }\n  };\n\n  Validator.prototype.start = function() {\n    for (var i = 0, validatorFunc; (validatorFunc = this.cache[i++]); ) {\n      var msg = validatorFunc(); // 开始校验，并取得校验后的返回信息\n      if (msg) {\n        // 如果有确切的返回值，说明校验没有通过\n        return msg;\n      }\n    }\n  }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`客户调用代码`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var registerForm = document.getElementById( 'registerForm' );\n\n  var validataFunc = function() {\n    var validator = new Validator(); // 创建一个 validator 对象\n\n    /***************添加一些校验规则****************/\n    validator.add(registerForm.userName, [\n      {\n        strategy: \"isNonEmpty\",\n        errorMsg: \"用户名不能为空\"\n      },\n      {\n        strategy: \"minLength:6\",\n        errorMsg: \"用户名长度不能小于 10 位\"\n      }\n    ]);\n\n    validator.add(registerForm.password, [\n      {\n        strategy: \"minLength:6\",\n        errorMsg: \"密码长度不能少于 6 位\"\n      }\n    ]);\n\n    validator.add(registerForm.phoneNumber, [\n      {\n        strategy: \"isMobile\",\n        errorMsg: \"手机号码格式不正确\"\n      }\n    ]);\n\n    var errorMsg = validator.start(); // 获得校验结果\n    return errorMsg; // 返回校验结果\n  };\n\n  var registerForm = document.getElementById(\"registerForm\");\n  registerForm.onsubmit = function() {\n    var errorMsg = validataFunc(); // 如果 errorMsg 有确切的返回值，说明未通过校验\n    if (errorMsg) {\n      alert(errorMsg);\n      return false; // 阻止表单提交\n    }\n  };\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"策略模式优缺点\"}}>{`策略模式优缺点`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 优点 `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它\n们易于切换，易于理解，易于扩展。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻\n便的替代方案`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 缺点 `}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`使用策略模式会在程序中增加许多策略类或者策略对象，但实际上这比把它们负责的 逻辑堆砌在 Context 中要好。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`要使用策略模式，必须了解所有的 strategy，必须了解各个 strategy 之间的不同点，\n这样才能选择一个合适的 strategy。比如，我们要选择一种合适的旅游出行路线，必须先了解选择飞机、火车、自行车等方案的细节。\n此时 strategy 要向客户暴露它的所有实现，这是违反最少知识原则的。`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在前面的学习中，为了清楚地表示这是一个策略模式，我们特意使用了 strategies 这个名字。\n如果去掉 strategies，我们还能认出这是一个策略模式的实现吗?代码如下:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var S = function(salary) {\n    return salary * 4;\n  };\n  var A = function(salary) {\n    return salary * 3;\n  };\n  var B = function(salary) {\n    return salary * 2;\n  };\n  var calculateBonus = function(func, salary) {\n    return func(salary);\n  };\n  calculateBonus(S, 10000);\n  // 输出:40000\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}