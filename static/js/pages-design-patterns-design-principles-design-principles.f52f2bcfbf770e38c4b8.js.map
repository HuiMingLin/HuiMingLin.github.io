{"version":3,"sources":["webpack:///./pages/design-patterns/design-principles/design-principles.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","start"],"mappings":"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","file":"static/js/pages-design-patterns-design-principles-design-principles.7cbacc43.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"设计模式\"}}>{`设计模式`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`设计原则通常指的是：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 单一职责原则 `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 里氏替换原则 `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 依赖倒置原则 `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 接口隔离原则 `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 合成复用原则 `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 最少知识原则 `}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"单一职责原则\"}}>{`单一职责原则`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`就一个类而言，应该仅有一个引起它变化的原因。在 JavaScript 中，需要用到类的场景并不太多，\n单一职责原则更多地是被运用在对象或者方法级别上，因此本节我们的讨论大多基于对象 和方法。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`单一职责原则(SRP)的职责被定义为“引起变化的原因”。如果我们有两个动机去改写一个方法，那么这个方法就具有两个职责。\n每个职责都是变化的一个轴线，如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`此时，这个方法通常是一个不稳定的方法，修改代码总是一件危险的事情，特别是当两个职责耦合在一起的时候，\n一个职责发生变化可能会影响到其他职责的实现，造成意想不到的破坏， 这种耦合性得到的是低内聚和脆弱的设计。\n因此，SRP 原则体现为: `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{` 一个对象(方法)只做一件事情 `}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"设计模式中的-srp-原则\"}}>{`设计模式中的 SRP 原则`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`SRP 原则在很多设计模式中都有着广泛的运用，例如代理模式、迭代器模式、单例模式和装饰者模式。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`代理模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`通过增加虚拟代理的方式，把预加载图片的职责放到代理对象中，而本体仅仅负责往页面中添加 img 标签，这也是它最原始的职责。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`myImage 负责往页面中添加 img 标签:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var myImage = (function() {\n    var imgNode = document.createElement(\"img\");\n    document.body.appendChild(imgNode);\n    return {\n      setSrc: function(src) {\n        imgNode.src = src;\n      }\n    };\n  })();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`proxyImage 负责预加载图片，并在预加载完成之后把请求交给本体 myImage:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var proxyImage = (function() {\n    var img = new Image();\n    img.onload = function() {\n      myImage.setSrc(this.src);\n    };\n    return {\n      setSrc: function(src) {\n        myImage.setSrc(\"file:// /C:/Users/svenzeng/Desktop/loading.gif\");\n        img.src = src;\n      }\n    };\n  })();\n  proxyImage.setSrc(\n    \"http:// imgcache.qq.com/music/photo/000GGDys0yA0Nk.jpg\"\n  );\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`把添加 img 标签的功能和预加载图片的职责分开放到两个对象中，这两个对象各自都只有一\n个被修改的动机。在它们各自发生改变的时候，也不会影响另外的对象。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\" props={{\"start\":2}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`迭代器模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们有这样一段代码，先遍历一个集合，然后往页面中添加一些 div，这些 div 的 innerHTML分别对应集合里的元素:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var appendDiv = function(data) {\n    for (var i = 0, l = data.length; i < l; i++) {\n      var div = document.createElement(\"div\");\n      div.innerHTML = data[i];\n      document.body.appendChild(div);\n    }\n  };\n  appendDiv([1, 2, 3, 4, 5, 6]);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这其实是一段很常见的代码，经常用于 ajax 请求之后，在回调函数中遍历 ajax 请求返回的 数据，然后在页面中渲染节点。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`appendDiv 函数本来只是负责渲染数据，但是在这里它还承担了遍历聚合对象 data 的职责。\n我们想象一下，如果有一天返回的 data 数据格式从 array 变成了 object，那我们遍历 data 的 代码就会出现问题，\n必须改成 for ( var i in data )的方式，这时候必须去修改 appendDiv 里的代码，\n否则因为遍历方式的改变，导致不能顺利往页面中添加 div 节点。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们有必要把遍历 data 的职责提取出来，这正是迭代器模式的意义，\n迭代器模式提供了一 种方法来访问聚合对象，而不用暴露这个对象的内部表示。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`当把迭代聚合对象的职责单独封装在 each 函数中后，即使以后还要增加新的迭代方式，我\n们只需要修改 each 函数即可，appendDiv 函数不会受到牵连，代码如下:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var each = function(obj, callback) {\n    var value,\n      i = 0,\n      length = obj.length,\n      isArray = isArraylike(obj);\n    if (isArray) {\n      // 迭代类数组\n\n      for (; i < length; i++) {\n        // isArraylike 函数未实现，可以翻阅 jQuery 源代码\n        callback.call(obj[i], i, obj[i]);\n      }\n    } else {\n      for (i in obj) {\n        // 迭代object对象\n        value = callback.call(obj[i], i, obj[i]);\n      }\n    }\n    return obj;\n  };\n  var appendDiv = function(data) {\n    each(data, function(i, n) {\n      var div = document.createElement(\"div\");\n      div.innerHTML = n;\n      document.body.appendChild(div);\n    });\n  };\n  appendDiv([1, 2, 3, 4, 5, 6]);\n  appendDiv({ a: 1, b: 2, c: 3, d: 4 });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\" props={{\"start\":3}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`单例模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`曾实现过一个惰性单例，最开始的代码是这样的:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var createLoginLayer = (function() {\n    var div;\n    return function() {\n      if (!div) {\n        div = document.createElement(\"div\");\n        div.innerHTML = \"我是登录浮窗\";\n        div.style.display = \"none\";\n        document.body.appendChild(div);\n      }\n      return div;\n    };\n  })();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在我们把管理单例的职责和创建登录浮窗的职责分别封装在两个方法里，这两个方法可以独立变化而互不影响，\n当它们连接在一起的时候，就完成了创建唯一登录浮窗的功能，下面的代码显然是更好的做法:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var getSingle = function(fn) {\n    // 获取单例 var result;\n\n    return function() {\n      return result || (result = fn.apply(this, arguments));\n    };\n  };\n\n  var createLoginLayer = function() {\n    // 创建登录浮窗\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"我是登录浮窗\";\n    document.body.appendChild(div);\n    return div;\n  };\n  var createSingleLoginLayer = getSingle(createLoginLayer);\n  var loginLayer1 = createSingleLoginLayer();\n  var loginLayer2 = createSingleLoginLayer();\n  alert(loginLayer1 === loginLayer2); // 输出: true\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\" props={{\"start\":4}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`装饰者模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`使用装饰者模式的时候，我们通常让类或者对象一开始只具有一些基础的职责，更多的职责在代码运行时被动态装饰到对象上面。\n装饰者模式可以为对象动态增加职责，从另一个角度来看， 这也是分离职责的一种方式。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们把数据上报的功能单独放在一个函数里，然后把这个函 数动态装饰到业务函数上面:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  Function.prototype.after = function(afterfn) {\n    var __self = this;\n    return function() {\n      var ret = __self.apply(this, arguments);\n      afterfn.apply(this, arguments);\n      return ret;\n    };\n  };\n  var showLogin = function() {\n    console.log(\"打开登录浮层\");\n  };\n  var log = function() {\n    console.log(\"上报标签为: \" + this.getAttribute(\"tag\"));\n  };\n  document.getElementById(\"button\").onclick = showLogin.after(log);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"何时应该分离职责\"}}>{`何时应该分离职责`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`SRP 原则是所有原则中最简单也是最难正确运用的原则之一。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`要明确的是，并不是所有的职责都应该一一分离。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`一方面，如果随着需求的变化，有两个职责总是同时变化，那就不必分离他们。比如在 ajax 请求的时候，\n创建 xhr 对象和发送 xhr 请求几乎总是在一起的，那么创建 xhr 对象的职责和发送 xhr 请求的职责就没有必要分开。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`另一方面，职责的变化轴线仅当它们确定会发生变化时才具有意义，即使两个职责已经被耦合在一起，\n但它们还没有发生改变的征兆，那么也许没有必要主动分离它们，在代码需要重构的 时候再进行分离也不迟。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"违反srp原则\"}}>{`违反SRP原则`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在人的常规思维中，总是习惯性地把一组相关的行为放到一起，如何正确地分离职责不是一件容易的事情。\n我们也许从来没有考虑过如何分离职责，但这并不妨碍我们编写代码完成需求。\n对于 SRP原则，许多专家委婉地表示“This is sometimes hard to see.”。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`一方面，我们受设计原则的指导，另一方面，我们未必要在任何时候都一成不变地遵守原则。\n在实际开发中，因为种种原因违反 SRP 的情况并不少见。比如 jQuery 的 attr 等方法，就是明显 违反 SRP 原则的做法。\njQuery 的 attr 是个非常庞大的方法，既负责赋值，又负责取值，这对于 jQuery 的维护者来说，会带来一些困难，\n但对于 jQuery 的用户来说，却简化了用户的使用。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在方便性与稳定性之间要有一些取舍。具体是选择方便性还是稳定性，并没有标准答案，而是要取决于具体的应用环境。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"srp-原则的优缺点\"}}>{`SRP 原则的优缺点`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`SRP 原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，\n这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`但 SRP 原则也有一些缺点，最明显的是会增加编写代码的复杂度。当我们按照职责把对象分解成更小的粒度之后，\n实际上也增大了这些对象之间相互联系的难度。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"最少知识原则\"}}>{`最少知识原则`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`最少知识原则(LKP)说的是一个软件实体应当尽可能少地与其他实体发生相互作用。\n这里的软件实体是一个广义的概念，不仅包括对象，还包括系统、类、模块、函数、变量等。\n本节我们主要针对对象来说明这个原则，下面引用《面向对象设计原理与模式》一书中的例子来解释最少知识原则:`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`某军队中的将军需要挖掘一些散兵坑。下面是完成任务的一种方式:将军可以通知 上校让他叫来少校，\n然后让少校找来上尉，并让上尉通知一个军士，最后军士唤来一个士兵，然后命令士兵挖掘一些散兵坑。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`这种方式十分荒谬，不是吗?不过，我们还是先来看一下这个过程的等价代码:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  gerneral.getColonel( c ).getMajor( m ).getCaptain( c ) .getSergeant( s ).getPrivate( p ).digFoxhole();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`让代码通过这么长的消息链才能完成一个任务，这就像让将军通过那么多繁琐的步骤才能命令别人挖掘散兵坑一样荒谬!\n而且，这条链中任何一个对象的改动都会影响整条链的结果。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`最有可能的是，将军自己根本就不会考虑挖散兵坑这样的细节信息。\n但是如果将军真的考虑了这个问题的话，他一定会通知某个军官:“我不关心这个工作如何完成，但是你得命令人去挖散兵坑。”`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"减少对象之间的联系\"}}>{`减少对象之间的联系`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`单一职责原则指导我们把对象划分成较小的粒度，这可以提高对象的可复用性。\n但越来越多的对象之间可能会产生错综复杂的联系，如果修改了其中一个对象，很可能会影响到跟它相互引用的其他对象。\n对象和对象耦合在一起，有可能会降低它们的可复用性。\n在程序中，对象的“朋友”太多并不是一件好事，“城门失火，殃及池鱼”和“一人犯法，株连九族”的故事 时有发生。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`最少知识原则要求我们在设计程序时，应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的相互联系。\n常见的做法是引入一个第三者对象，来承担这些对象之间的通信作用。如果一些对象需要向另一些对象发起请求，可以通过第三者对象来转发这些请求。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"设计模式中的最少知识原则\"}}>{`设计模式中的最少知识原则`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`最少知识原则在设计模式中体现得最多的地方是中介者模式和外观模式，下面我们分别进行介绍。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"1-中介者模式\"}}>{`1. 中介者模式`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在世界杯期间购买足球彩票，如果没有博彩公司作为中介，上千万的人一起计算赔率和输赢绝对是不可能的事情。\n博彩公司作为中介，每个人都只和博彩公司发生关联，博彩公司会根据所有人的投注情况计算好赔率，\n彩民们赢了钱就从博彩公司拿，输了钱就赔给博彩公司。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`中介者模式很好地体现了最少知识原则。通过增加一个中介者对象，让所有的相关对象都通 过中介者对象来通信，而不是互相引用。\n所以，当一个对象发生改变时，只需要通知中介者对象即可。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"2外观模式\"}}>{`2.外观模式`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们在第二部分没有提到外观模式，是因为外观模式在 JavaScript 中的使用场景并不多。\n外观模式主要是为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个 接口使子系统更加容易使用。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`外观模式的作用是对客户屏蔽一组子系统的复杂性。外观模式对客户提供一个简单易用的高层接口，\n高层接口会把客户的请求转发给子系统来完成具体的功能实现。大多数客户都可以通过 请求外观接口来达到访问子系统的目的。\n但在一段使用了外观模式的程序中，请求外观并不是强制的。如果外观不能满足客户的个性化需求，那么客户也可以选择越过外观来直接访问子系统。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`拿全自动洗衣机的一键洗衣按钮举例，这个一键洗衣按钮就是一个外观。如果是老式洗衣机， 客户要手动选择浸泡、洗衣、漂洗、脱水这 4 个步骤。\n如果这种洗衣机被淘汰了，新式洗衣机的 漂洗方式发生了改变，那我们还得学习新的漂洗方式。\n而全自动洗衣机的好处很明显，不管洗衣 机内部如何进化，客户要操作的，始终只是一个一键洗衣的按钮。\n这个按钮就是为一组子系统所 创建的外观。但如果一键洗衣程序设定的默认漂洗时间是 20 分钟，\n而客户希望这个漂洗时间是 30 分钟，那么客户自然可以选择越过一键洗衣程序，自己手动来控制这些“子系统”运转。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`外观模式容易跟普通的封装实现混淆。这两者都封装了一些事物，但外观模式的关键是定义一个高层接口去封装一组“子系统”。\n子系统在 C++或者 Java 中指的是一组类的集合，这些类相互协作可以组成系统中一个相对独立的部分。\n在 JavaScript 中我们通常不会过多地考虑“类”，如 果将外观模式映射到 JavaScript 中，这个子系统至少应该指的是一组函数的集合。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`最简单的外观模式应该是类似下面的代码:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var A = function() {\n    a1();\n    a2();\n  };\n  var B = function() {\n    b1();\n    b2();\n  };\n  var facade = function() {\n    A();\n    B();\n  };\n  facade();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`许多 JavaScript 设计模式的图书或者文章喜欢把 jQuery 的\\$.ajax 函数当作外观模式的实现， 这是不合适的。\n如果\\$.ajax 函数属于外观模式，那几乎所有的函数都可以被称为“外观模式”。\n问题是我们根本没有办法越过\\$.ajax“外观”去直接使用该函数中的某一段语句。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`假设我们要编写一个具有缓存效果的计算乘积的函数 function mult (){}，我们需要一个对象 var cache = {}来保存已经计算过的结果。\ncache 对象显然只对 mult 有用，把 cache 对象放在现在再来看看外观模式和最少知识原则之间的关系。\n外观模式的作用主要有两点。 `}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`为一组子系统提供一个简单便利的访问入口。`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`隔离客户与复杂子系统之间的联系，客户不用去了解子系统的细节。 `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`从第二点来，外观模式是符合最少知识原则的。比如全自动洗衣机的一键洗衣按钮，隔开了客户和浸泡、洗衣、漂洗、脱水这些子系统的直接联系，\n客户不用去了解这些子系统的具体实现。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`假设我们在编写这个老式洗衣机的程序，客户至少要和浸泡、洗衣、漂洗、脱水这 4 个子系统打交道。\n如果其中的一个子系统发生了改变，那么客户的调用代码就得发生改变。而通过外观将客户和这些子系统隔开之后，\n如果修改子系统内部，只要外观不变，就不会影响客户的调用。 同样，对外观的修改也不会影响到子系统，它们可以分别变化而互不影响。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"封装在最少知识原则中的体现\"}}>{`封装在最少知识原则中的体现`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`封装在很大程度上表达的是数据的隐藏。一个模块或者对象可以将内部的数据或者实现细节隐藏起来，只暴露必要的接口 API 供外界访问。\n对象之间难免产生联系，当一个对象必须引用另外一个对象的时候，我们可以让对象只暴露必要的接口，让对象之间的联系限制在最小的范围之内。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`同时，封装也用来限制变量的作用域。在 JavaScript 中对变量作用域的规定是:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{` 变量在全局声明，或者在代码的任何位置隐式申明(不用 var)，则该变量在全局可见;\n 变量在函数内显式申明(使用 var)，则在函数内可见。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`把变量的可见性限制在一个尽可能小的范围内，这个变量对其他不相关模块的影响就越小，\n变量被改写和发生冲突的机会也越小。这也是广义的最少知识原则的一种体现。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`假设我们要编写一个具有缓存效果的计算乘积的函数 function mult (){}，我们需要一个对象 var cache = {}来保存已经计算过的结果。\ncache 对象显然只对 mult 有用，把 cache 对象放在mult 形成的闭包中，显然比把它放在全局作用域更加合适，代码如下:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var mult = (function() {\n    var cache = {};\n    return function() {\n      var args = Array.prototype.join.call(arguments, \",\");\n      if (cache[args]) {\n        return cache[args];\n      }\n\n      var a = 1;\n      for (vari = 0, l = arguments.length; i < l; i++) {\n        a = a * arguments[i];\n      }\n      return (cache[args] = a);\n    };\n  })();\n  mult(1, 2, 3); // 输出: 6\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`其实，最少知识原则也叫迪米特法则(Law of Demeter，LoD)，“迪米特”这个名字源自 1987 年美国东北大学一个名为“Demeter”的研究项目。\n许多人更倾向于使用迪米特法则这个名字，也许是因为显得更酷一点。\n但本书参考 Head First Design Patterns 的建议，称之为最少知识原则。\n一是因为这个名字更能体现其含义，另一个原因 是“法则”给人的感觉是必须强制遵守，\n而原则只是一种指导，没有哪条原则是在实际开发中必须遵守的。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`比如，虽然遵守最小知识原则减少了对象之间的依赖，但也有可能增加一些庞大到难以维护的第三者对象。\n跟单一职责原则一样，在实际开发中，是否选择让代码符合最少知识原则， 要根据具体的环境来定。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"开放-封闭原则\"}}>{`开放-封闭原则`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在面向对象的程序设计中，开放-封闭原则(OCP)是最重要的一条原则。\n很多时候，一个程序具有良好的设计，往往说明它是符合开放封闭原则的。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`开放-封闭原则最早由 Eiffel 语言的设计者 Bertrand Meyer 在其著作 Object-Oriented Software Construction 中提出。\n它的定义如下:`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`软件实体(类、模块、函数)等应该是可以扩展的，但是不可修改。  `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"扩展windowonload函数\"}}>{`扩展window.onload函数`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`假设我们是一个大型 Web 项目的维护人员，在接手这个项目时，发现它已经拥有 10 万行以上的 JavaScript 代码和数百个 JS 文件。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`不久后接到了一个新的需求，即在 window.onload 函数中打印出页面中的所有节点数量。这 当然难不倒我们了。\n于是我们打开文本编辑器，搜索出 window.onload 函数在文件中的位置，在函数内部添加以下代码:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在项目需求变迁的过程中，我们经常会找到相关代码，然后改写它们。这似乎是理所当然的事情，不改动代码怎么满足新的需求呢?\n想要扩展一个模块，最常用的方式当然是修改它的源代 码。如果一个模块不允许修改，那么它的行为常常是固定的。\n然而，改动代码是一种危险的行为， 也许我们都遇到过 bug 越改越多的场景。刚刚改好了一个 bug，但是又在不知不觉中引发了其他的 bug。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`如果目前的 window.onload 函数是一个拥有 500 行代码的巨型函数，里面密布着各种变量和 交叉的业务逻辑，\n而我们的需求又不仅仅是打印一个 log 这么简单。那么“改好一个 bug，引发 其他 bug”这样的事情就很可能会发生。\n我们永远不知道刚刚的改动会有什么副作用，很可能会 引发一系列的连锁反应。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`那么，有没有办法在不修改代码的情况下，就能满足新需求呢? 通过增加代码，而不是修改代码的方式，\n来给 window.onload 函数添加新的功能，代码如下:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  Function.prototype.after = function(afterfn) {\n    var __self = this;\n    return function() {\n      var ret = __self.apply(this, arguments);\n      afterfn.apply(this, arguments);\n      return ret;\n    };\n  };\n  window.onload = (window.onload || function() {}).after(function() {\n    console.log(document.getElementsByTagName(\"*\").length);\n  });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`通过动态装饰函数的方式，我们完全不用理会从前 window.onload 函数的内部实现，无论它的实现优雅或是丑陋。\n就算我们作为维护者，拿到的是一份混淆压缩过的代码也没有关系。\n只要它从前是个稳定运行的函数，那么以后也不会因为我们的新增需求而产生错误。新增的代码和原有的代码可以井水不犯河水。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"开放和封闭\"}}>{`开放和封闭`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`上一节为 window.onload 函数扩展功能时，用到了两种方式。一种是修改原有的代码，另一\n种是增加一段新的代码。使用哪种方式效果更好，已经不言而喻。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在可以引出开放封闭原则的思想: `}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{` 当需要改变一个程序的功能或者给这个程序增加新功 能的时候，可以使用增加代码的方式，但是不允许改动程序的源代码 `}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`在现实生活中，我们也能找到一些跟开放封闭原则相关的故事。下面这个故事人尽皆知， 且跟肥皂相关。`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`有一家生产肥皂的大企业，从欧洲花巨资引入了一条生产线。\n这条生产线可以自动 完成从原材料加工到包装成箱的整个流程，但美中不足的是，生产出来的肥皂有一定的空盒几率。\n于是老板又从欧洲找来一支专家团队，花费数百万元改造这一生产线，终于 解决了生产出空盒肥皂的问题。`}</MDXTag>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`另一家企业也引入了这条生产线，他们同样遇到了空盒肥皂的问题。但他们的解决\n办法很简单:用一个大风扇在生产线旁边吹，空盒肥皂就会被吹走。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`这个故事告诉我们，相比修改源程序，如果通过增加几行代码就能解决问题，那这显然更加简单和优雅，而且增加代码并不会影响原系统的稳定。\n讲述这个故事，我们的目的不在于说明风扇的成本有多低，而是想说明，如果使用风扇这样简单的方式可以解决问题，\n根本没有必要去大动干戈地改造原有的生产线。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"用对象的多态性消除条件分支\"}}>{`用对象的多态性消除条件分支`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`过多的条件分支语句是造成程序违反开放封闭原则的一个常见原因。每当需要增加一个新 的 if 语句时，都要被迫改动原函数。\n把 if 换成 switch-case 是没有用的，这是一种换汤不换药的做法。\n实际上，每当我们看到一大片的 if 或者 swtich-case 语句时，第一时间就应该考虑，能 否利用对象的多态性来重构它们。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`利用对象的多态性来让程序遵守开放封闭原则，是一个常用的技巧。我们选用让动物发出叫声的例子。\n下面先提供一段不符合开放封闭原则的代码。每当我们增加一种新的动物时，都需要改动 makeSound 函数的内部实现:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var makeSound = function(animal) {\n    if (animal instanceof Duck) {\n      console.log(\"嘎嘎嘎\");\n    } else if (animal instanceof Chicken) {\n      console.log(\"咯咯咯\");\n    }\n  };\n\n  var Duck = function() {};\n  var Chicken = function() {};\n\n  makeSound(new Duck());\n  makeSound(new Chicken());\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`动物世界里增加一只狗之后，makeSound 函数必须改成:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var makeSound = function(animal) {\n    if (animal instanceof Duck) {\n      console.log(\"嘎嘎嘎\");\n    } else if (animal instanceof Chicken) {\n      console.log(\"咯咯咯\");\n    } else if (animal instanceof Dog) {\n      console.log(\"汪汪汪\");\n    }\n  };\n\n\n  var Dog = function() {};\n  makeSound(new Dog()); // 增加一只狗\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`利用多态的思想，我们把程序中不变的部分隔离出来(动物都会叫)，\n然后把可变的部分封 装起来(不同类型的动物发出不同的叫声)，这样一来程序就具有了可扩展性。\n当我们想让一只狗发出叫声时，只需增加一段代码即可，而不用去改动原有的 makeSound 函数:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var makeSound = function(animal) {\n    animal.sound();\n  };\n\n  var Duck = function() {};\n  Duck.prototype.sound = function() {\n    console.log(\"嘎嘎嘎\");\n  };\n\n  var Chicken = function() {};\n  Chicken.prototype.sound = function() {\n    console.log(\"咯咯咯\");\n  };\n  \n  makeSound(new Duck()); // 嘎嘎嘎\n  makeSound(new Chicken()); // 咯咯咯\n\n  /********* 增加动物狗，不用改动原有的 makeSound 函数 ****************/\n  var Dog = function() {};\n  Dog.prototype.sound = function() {\n    console.log(\"汪汪汪\");\n  };\n  \n  makeSound(new Dog()); // 汪汪汪\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"找出变化的地方\"}}>{`找出变化的地方`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`开放封闭原则是一个看起来比较虚幻的原则，并没有实际的模板教导我们怎样亦步亦趋地实现它。\n但我们还是能找到一些让程序尽量遵守开放封闭原则的规律，最明显的就是找出程序中将要发生变化的地方，然后把变化封装起来。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`通过封装变化的方式，可以把系统中稳定不变的部分和容易变化的部分隔离开来。在系统的演变过程中，我们只需要替换那些容易变化的部分，\n如果这些部分是已经被封装好的，那么替换 起来也相对容易。而变化部分之外的就是稳定的部分。在系统的演变过程中，稳定的部分是不需要改变的。\n在上一节的例子中，由于每种动物的叫声都不同，所以动物具体怎么叫是可变的，于是我们 把动物具体怎么叫的逻辑从 makeSound 函数中分离出来。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`而动物都会叫这是不变的，makeSound 函数里的实现逻辑只跟动物都会叫有关，这样一来，makeSound 就成了一个稳定和封闭的函数。\n除了利用对象的多态性之外，还有其他方式可以帮助我们编写遵守开放封闭原则的代码，下面将详细介绍。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`1、放置挂钩`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`放置挂钩(hook)也是分离变化的一种方式。我们在程序有可能发生变化的地方放置一个挂钩，挂钩的返回结果决定了程序的下一步走向。\n这样一来，原本的代码执行路径上就出现了一个分叉路口，程序未来的执行方向被预埋下多种可能性。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`翻阅过 jQuery 源代码的读者也许会留意，jQuery 从 1.4 版本开始，陆续加入了 fixHooks、 keyHooks、mouseHooks、cssHooks 等挂钩。\n在 Template  模式已经见过了 hook了， 在其中的父类是一个相当稳定的类，它封装了子类的算法骨架和执行步骤。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`由于子类的数量是无限制的，总会有一些“个性化”的子类迫使我们不得不去改变已经封装好的算法骨架。\n于是我们可以在父类中的某个容易变化的地方放置挂钩，挂钩的返回结果由具体 子类决定。这样一来，程序就拥有了变化的可能。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`2、 使用回调函数`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在 JavaScript 中，函数可以作为参数传递给另外一个函数，这是高阶函数的意义之一。在这种情况下，我们通常会把这个函数称为回调函数。\n在 JavaScript 版本的设计模式中，策略模式和 命令模式等都可以用回调函数轻松实现。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`回调函数是一种特殊的挂钩。我们可以把一部分易于变化的逻辑封装在回调函数里，然后把回调函数当作参数传入一个稳定和封闭的函数中。\n当回调函数被执行的时候，程序就可以因为回 调函数的内部逻辑不同，而产生不同的结果。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`比如，我们通过 ajax 异步请求用户信息之后要做一些事情，请求用户信息的过程是不变的， 而获取到用户信息之后要做什么事情，则是可能变化的:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var getUserInfo = function(callback) {\n    \\$.ajax(\"http:// xxx.com/getUserInfo\", callback);\n  };\n  getUserInfo(function(data) {\n    console.log(data.userName);\n  });\n  getUserInfo(function(data) {\n    console.log(data.userId);\n  });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`另外一个例子是关于 Array.prototype.map 的。在不支持 Array.prototype.map 的浏览器中，我们可以简单地模拟实现一个 map 函数。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`arrayMap 函数的作用是把一个数组“映射”为另外一个数组。\n映射的步骤是不变的，而映射的规则是可变的，于是我们把这部分规则放在回调函数中，传入 arrayMap 函数:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var arrayMap = function(ary, callback) {\n    var i = 0,\n      length = ary.length,\n      value,\n      ret = [];\n    for (; i < length; i++) {\n      value = callback(i, ary[i]);\n      ret.push(value);\n    }\n    return ret;\n  };\n\n  var a = arrayMap([1, 2, 3], function(i, a) {\n    return n * 2;\n  });\n\n  var b = arrayMap([1, 2, 3], function(i, n) {\n    return n * 3;\n  });\n\n  console.log(a); // 输出:[ 2, 4, 6 ]\n  console.log(b); // 输出:[ 3, 6, 9 ]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"设计模式中的开放-封闭原则\"}}>{`设计模式中的开放-封闭原则`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`发布订阅模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`发布-订阅模式用来降低多个对象之间的依赖关系，它可以取代对象之间硬编码的通知机制， 一个对象不用再显式地调用另外一个对象的某个接口。\n当有新的订阅者出现时，发布者的代码不 需要进行任何修改;同样当发布者需要改变时，也不会影响到之前的订阅者。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\" props={{\"start\":2}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`模板方法模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`模板方法模式是一种典型的通过封装变化来提高系统扩展性的设计模式。\n在一个运用了模板方法模式的程序中，子类的方法种类和执行顺序都是不变的，所以 我们把这部分逻辑抽出来放到父类的模板方法里面;\n而子类的方法具体怎么实现则是可变的，于是把这部分变化的逻辑封装到子类中。\n通过增加新的子类，便能给系统增加新的功能，并不需要改动抽象父类以及其他的子类，这也是符合开放封闭原则的。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\" props={{\"start\":3}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`策略模式 `}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`策略模式和模板方法模式是一对竞争者。在大多数情况下，它们可以相互替换使用。\n模板方法模式基于继承的思想，而策略模式则偏重于组合和委托。\n策略模式将各种算法都封装成单独的策略类，这些策略类可以被交换使用。\n策略和使用策略的客户代码可以分别独立进行修改而互不影响。我们增加一个新的策略类也非常方便，完全不用修改之前的代码。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\" props={{\"start\":4}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`代理模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`拿预加载图片举例，我们现在已有一个给图片设置 src 的函数 myImage，\n当我们想为它增加图片预加载功能时， 一种做法是改动 myImage 函数内部的代码，\n更好的做法是提供一个代理函数 proxyMyImage，代理函数负责图片预加载，\n在图片预加载完成之后，再将请求转交给原来的 myImage 函数，myImage 在 这个过程中不需要任何改动。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`预加载图片的功能和给图片设置 src 的功能被隔离在两个函数里，它们可以单独改变而互不影响。\nmyImage 不知晓代理的存在，它可以继续专注于自己的职责——给图片设置 src。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"ol\" components={components} parentName=\"li\" props={{\"start\":5}}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`职责链模式`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`把一个巨大的订单函数分别拆成了 500 元订单、 200 元订单以及普通订单的 3 个函数。\n这 3 个函数通过职责链连接在一起，客户的请求会在这条链条里面依次传递:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  var order500yuan = new Chain(function(orderType, pay, stock) {\n    // 具体代码略\n  });\n  var order200yuan = new Chain(function(orderType, pay, stock) {\n    // 具体代码略\n  });\n  var orderNormal = new Chain(function(orderType, pay, stock) {\n    // 具体代码略\n  });\n  order500yuan.setNextSuccessor(order200yuan).setNextSuccessor(orderNormal);\n  order500yuan.passRequest(1, true, 10); // 500 元定金预购，得到 100 优惠券\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`可以看到，当我们增加一个新类型的订单函数时，不需要改动原有的订单函数代码，只需要在链条中增加一个新的节点。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"开放-封闭原则的相对性\"}}>{`开放-封闭原则的相对性`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在职责链模式代码中，大家也许会产生这个疑问: 开放封闭原则要求我们只能通过增加源 代码的方式扩展程序的功能，而不允许修改源代码。\n那当我们往职责链中增加一个新的 100 元订 单函数节点时，不也必须改动设置链条的代码吗?代码如下:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  order500yuan.setNextSuccessor(order200yuan).setNextSuccessor(orderNormal);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`变为： `}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  order500yuan\n        .setNextSuccessor(order200yuan)\n        .setNextSuccessor(order100yuan)\n        .setNextSuccessor(orderNormal);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`实际上，让程序保持完全封闭是不容易做到的。就算技术上做得到，也需要花费太多的时间 和精力。\n而且让程序符合开放-封闭原则的代价是引入更多的抽象层次，更多的抽象有可能会增大代码的复杂度。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`更何况，有一些代码是无论如何也不能完全封闭的，总会存在一些无法对其封闭的变化。作 为程序员，我们可以做到的有下面两点。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`挑选出最容易发生变化的地方，然后构造抽象来封闭这些变化。`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`在不可避免发生修改的时候，尽量修改那些相对容易修改的地方。拿一个开源库来说，修改它提供的配置文件，总比修改它的源代码来得简单。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`比如那个巨大的订单函数，它包含了各种订单的逻辑，有 500 元和 200 元的，也有普通订单的。\n这个函数是最有可能发生变化的，一旦增加新的订单，就必须修改这个 巨大的函数。\n而用职责链模式重构之后，我们只需要新增一个节点，然后重新设置链条中节点的 连接顺序。\n重构后的修改方式显然更加清晰简单 。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"接受第一次愚弄\"}}>{`接受第一次愚弄`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`下面这段话引自 Bob 大叔的《敏捷软件开发原则、模式与实践》。`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`有句古老的谚语说:“愚弄我一次，应该羞愧的是你。再次愚弄我，应该羞愧的是 我。\n”这也是一种有效的对待软件设计的态度。为了防止软件背着不必要的复杂性，我们会允许自己被愚弄一次。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`让程序一开始就尽量遵守开放封闭原则，并不是一件很容易的事情。\n一方面，我们需要尽 快知道程序在哪些地方会发生变化，这要求我们有一些“未卜先知”的能力。\n另一方面，留给程 序员的需求排期并不是无限的，所以我们可以说服自己去接受不合理的代码带来的第一次愚弄。\n在最初编写代码的时候，先假设变化永远不会发生，这有利于我们迅速完成需求。\n当变化发生并且对我们接下来的工作造成影响的时候，可以再回过头来封装这些变化的地方。\n然后确保我们不会掉进同一个坑里，这有点像星矢说的:“圣斗士不会被同样的招数击倒第二次。”`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}