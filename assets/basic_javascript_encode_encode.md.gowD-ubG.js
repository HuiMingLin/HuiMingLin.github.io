import{_ as e,c as s,o as a,a1 as i}from"./chunks/framework.DwaB85k5.js";const m=JSON.parse('{"title":"编码","description":"","frontmatter":{"menu":"javascript"},"headers":[],"relativePath":"basic/javascript/encode/encode.md","filePath":"basic/javascript/encode/encode.md","lastUpdated":1717148050000}'),n={name:"basic/javascript/encode/encode.md"},p=i(`<h1 id="编码" tabindex="-1">编码 <a class="header-anchor" href="#编码" aria-label="Permalink to &quot;编码&quot;">​</a></h1><h2 id="escape函数" tabindex="-1">escape函数 <a class="header-anchor" href="#escape函数" aria-label="Permalink to &quot;escape函数&quot;">​</a></h2><p>首先，我们来了解一下<code>escape</code>函数。这是一个老旧的函数，现在已经不再推荐使用，因为它不能处理所有的Unicode字符。<code>escape</code>函数会将传入的字符串转化为十六进制的escape序列，这样的序列以%开头。</p><p>然而，这个函数只能正确处理ASCII字符（字符代码小于等于255的字符）。对于ASCII字符代码大于255的字符，escape函数会先将其转化为Unicode转义序列（例如，<code>\\u20AC</code>），然后再对这个转义序列进行编码。这种处理方式会导致一些问题。比如，对于欧元符号（<code>€</code>），它的Unicode代码是<code>20AC</code>，<code>escape</code>函数会将其转化为<code>%u20AC</code>，而不是正确的<code>%E2%82%AC</code>。</p><p>因此，我们不应该再使用escape函数来处理URL编码。</p><h2 id="encodeuri函数" tabindex="-1">encodeURI函数 <a class="header-anchor" href="#encodeuri函数" aria-label="Permalink to &quot;encodeURI函数&quot;">​</a></h2><p>接下来，我们来看看encodeURI函数。这个函数用于编码完整的URL。它会将非法的URL字符转化为各自的十六进制表示，以%开头。</p><p>然而，encodeURI函数并不会对所有的字符进行编码。一些在URL中有特殊含义的字符，例如/，:，#等，以及ASCII字母，数字和一些符号（- _ . ! ~ * &#39; ( )），不会被encodeURI函数编码。这是因为这些字符在URL中是合法的，可以直接使用。</p><p>下面是一个encodeURI函数的例子：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://example.com/Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://example.com/Hello%20World!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这个例子中，encodeURI函数将空格字符编码为%20，因为空格在URL中是不合法的。而其他的字符，如/和:等，都没有被编码。</p><h2 id="encodeuricomponent函数" tabindex="-1">encodeURIComponent函数 <a class="header-anchor" href="#encodeuricomponent函数" aria-label="Permalink to &quot;encodeURIComponent函数&quot;">​</a></h2><p>最后，我们来看看encodeURIComponent函数。这个函数用于编码URL的组成部分，比如查询参数。它会将所有非法的URL字符以及一些有特殊含义的字符（如/，:，#等）转化为各自的十六进制表示。</p><p>这意味着encodeURIComponent函数会对更多的字符进行编码。在大多数情况下，我们都应该使用<code>encodeURIComponent</code>函数来编码URL的组成部分。</p><p>下面是一个encodeURIComponent函数的例子：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// %2FHello%20World%21</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这个例子中，encodeURIComponent函数将/和空格字符都编码了，因为这些字符在URL的查询参数中都是不合法的。</p><p>总的来说，当我们需要编码完整的URL时，应该使用encodeURI函数；而当我们需要编码URL的组成部分，比如查询参数，应该使用encodeURIComponent函数。不再推荐使用escape函数，因为它不能正确处理所有的字符。</p>`,18),o=[p];function t(d,c,l,h,r,k){return a(),s("div",null,o)}const g=e(n,[["render",t]]);export{m as __pageData,g as default};
