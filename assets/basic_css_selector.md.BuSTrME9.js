import{_ as i,c as l,o as t,a1 as e}from"./chunks/framework.DwaB85k5.js";const k=JSON.parse('{"title":"css选择器","description":"","frontmatter":{"menu":"CSS"},"headers":[],"relativePath":"basic/css/selector.md","filePath":"basic/css/selector.md","lastUpdated":1717148050000}'),a={name:"basic/css/selector.md"},s=e('<h1 id="css选择器" tabindex="-1">css选择器 <a class="header-anchor" href="#css选择器" aria-label="Permalink to &quot;css选择器&quot;">​</a></h1><ul><li><p>id选择器（#box），选择id为box的元素</p></li><li><p>类选择器（.one），选择类名为one的所有元素</p></li><li><p>属性选择器</p><ul><li>[attribute] 选择带有attribute属性的元素</li><li>[attribute=value] 选择所有使用attribute=value的元素</li><li>[attribute~=value] 选择attribute属性包含value的元素</li><li>[attribute|=value]：选择attribute属性以value开头的元素</li></ul></li><li><p>伪类选择器</p><ul><li>:link ：选择未被访问的链接</li><li>:visited：选取已被访问的链接</li><li>:active：选择活动链接</li><li>:hover ：鼠标指针浮动在上面的元素</li><li>:focus ：选择具有焦点的</li><li>:first-child：父元素的首个子元素</li></ul></li><li><p>标签选择器（div），选择标签为div的所有元素</p></li><li><p>伪元素选择器</p><ul><li>:first-letter ：用于选取指定选择器的首字母</li><li>:first-line ：选取指定选择器的首行</li><li>:before : 选择器在被选元素的内容前面插入内容</li><li>:after : 选择器在被选元素的内容后面插入内容</li></ul></li><li><p>后代选择器（#box div），选择id为box元素内部所有的div元素</p></li><li><p>子选择器（.one &gt; one_1），选择父元素为.one的所有.one_1的元素</p></li><li><p>相邻同胞选择器（.one + .two），选择紧接在.one之后的所有.two元素</p></li><li><p>群组选择器（div,p），选择div、p的所有元素</p></li><li><p>新增的选择器</p><ul><li><p>层次选择器（p~ul），选择前面有p元素的每个ul元素</p></li><li><p>属性选择器</p><ul><li>[attribute*=value]：选择attribute属性值包含value的所有元素</li><li>[attribute^=value]：选择attribute属性开头为value的所有元素</li><li>[attribute$=value]：选择attribute属性结尾为value的所有元素</li></ul></li><li><p>伪类选择器</p><ul><li>:first-of-type 表示一组同级元素中其类型的第一个元素</li><li>:last-of-type 表示一组同级元素中其类型的最后一个元素</li><li>:only-of-type 表示没有同类型兄弟元素的元素</li><li>:only-child 表示没有任何兄弟的元素</li><li>:nth-child(n) 根据元素在一组同级中的位置匹配元素</li><li>:nth-last-of-type(n) 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数</li><li>:last-child 表示一组兄弟元素中的最后一个元素</li><li>:root 设置HTML文档</li><li>:empty 指定空的元素</li><li>:enabled 选择可用元素</li><li>:disabled 选择被禁用元素</li><li>:checked 选择选中的元素</li><li>:not(selector) 选择与 selector 不匹配的所有元素</li></ul></li></ul></li></ul><h2 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h2><p>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p><p>到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ul><li><p>如果存在内联样式，那么 A = 1, 否则 A = 0</p></li><li><p>B的值等于 ID选择器出现的次数</p></li><li><p>C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数</p></li><li><p>D 的值等于 标签选择器 和 伪元素 出现的总次数</p></li></ul><p>这里举个例子：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#nav-global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.nav-link</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>套用上面的算法，依次求出 A B C D 的值：</p><ul><li><p>因为没有内联样式 ，所以 A = 0</p></li><li><p>ID选择器总共出现了1次， B = 1</p></li><li><p>类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1</p></li><li><p>标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3</p></li></ul><p>上面算出的A 、 B、C、D 可以简记作：(0, 1, 1, 3)</p><p>知道了优先级是如何计算之后，就来看看比较规则：</p><ul><li>从左往右依次进行比较 ，较大者优先级更高</li><li>如果相等，则继续往右移动一位进行比较</li><li>如果4位全部相等，则后面的会覆盖前面的</li></ul><p>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用!important</p>',14),p=[s];function n(r,o,u,c,d,h){return t(),l("div",null,p)}const v=i(a,[["render",n]]);export{k as __pageData,v as default};
