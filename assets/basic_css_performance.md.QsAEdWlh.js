import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.DwaB85k5.js";const g=JSON.parse('{"title":"性能优化","description":"","frontmatter":{"menu":"CSS"},"headers":[],"relativePath":"basic/css/performance.md","filePath":"basic/css/performance.md","lastUpdated":1717148050000}'),t={name:"basic/css/performance.md"},n=e(`<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><h2 id="内联首屏关键css" tabindex="-1">内联首屏关键CSS <a class="header-anchor" href="#内联首屏关键css" aria-label="Permalink to &quot;内联首屏关键CSS&quot;">​</a></h2><p>在打开一个页面时，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联CSS关键代码能够使浏览器在下载完HTML后就能立刻渲染。</p><p>而如果外部引用CSS代码，在解析HTML结构过程中遇到外部CSS文件，才会开始下载CSS代码，再渲染。</p><p>所以，CSS内联使用使渲染时间提前。</p><p>注意：但是较大的CSS代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式。</p><h2 id="异步加载css" tabindex="-1">异步加载CSS <a class="header-anchor" href="#异步加载css" aria-label="Permalink to &quot;异步加载CSS&quot;">​</a></h2><p>在CSS文件请求、下载、解析完成之前，CSS会阻塞渲染，浏览器将不会渲染任何已处理的内容。</p><p>前面加载内联代码后，后面的外部引用CSS则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下：</p><p>使用JavaScript将link标签插到head标签最后</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建link标签</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myCSS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;link&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCSS.rel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCSS.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mystyles.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插入到header的最后位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.head.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCSS, document.head.childNodes[document.head.childNodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].nextSibling);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>设置link标签media属性为noexis，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将media的值设为screen或all，从而让浏览器开始解析CSS</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mystyles.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> media</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;noexist&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this.media=&#39;all&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel设回stylesheet</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alternate stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mystyles.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this.rel=&#39;stylesheet&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="资源压缩" tabindex="-1">资源压缩 <a class="header-anchor" href="#资源压缩" aria-label="Permalink to &quot;资源压缩&quot;">​</a></h2><p>利用webpack、gulp/grunt、rollup等模块化工具，将CSS代码进行压缩，使文件变小，大大降低了浏览器的加载时间。</p><h2 id="合理使用选择器" tabindex="-1">合理使用选择器 <a class="header-anchor" href="#合理使用选择器" aria-label="Permalink to &quot;合理使用选择器&quot;">​</a></h2><p>CSS匹配的规则是从右往左开始匹配，例如#markdown .content h3匹配规则如下：</p><ul><li>先找到h3标签元素</li><li>然后去除祖先不是.content的元素</li><li>最后去除祖先不是#markdown的元素</li></ul><p>如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高。</p><p>所以我们在编写选择器的时候，可以遵循以下规则：</p><ul><li>不要嵌套使用过多复杂选择器，最好不要三层以上</li><li>使用id选择器就没必要再进行嵌套</li><li>通配符和属性选择器效率最低，避免使用</li></ul><h2 id="减少使用昂贵的属性" tabindex="-1">减少使用昂贵的属性 <a class="header-anchor" href="#减少使用昂贵的属性" aria-label="Permalink to &quot;减少使用昂贵的属性&quot;">​</a></h2><p>在页面发生重绘的时候，昂贵属性如box-shadow/border-radius/filter/透明度/:nth-child等，会降低浏览器的渲染性能。</p><h2 id="不要使用-import" tabindex="-1">不要使用@import <a class="header-anchor" href="#不要使用-import" aria-label="Permalink to &quot;不要使用@import&quot;">​</a></h2><p>CSS样式文件有两种引入方式，一种是link元素，另一种是@import。</p><p>@import会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时。</p><p>而且多个@import可能会导致下载顺序紊乱。</p><p>比如一个CSS文件index.css包含了以下内容：@import url(&quot;reset.css&quot;)。</p><p>那么浏览器就必须先把index.css下载、解析和执行后，才下载、解析和执行第二个文件reset.css。</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>减少重排操作，以及减少不必要的重绘</li><li>了解哪些属性可以继承而来，避免对这些属性重复编写</li><li>CSS Sprite，合成所有icon图片，用宽高加上background-position的背景图方式显现出我们要的- icon图，减少了HTTP请求</li><li>把小的icon图片转成Base64编码</li><li>CSS3动画或者过渡尽量使用transform和opacity来实现动画，不要使用left和top属性</li></ul>`,33),l=[n];function h(p,r,k,d,o,c){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
