import{_ as a,c as s,o as n,a1 as e}from"./chunks/framework.DwaB85k5.js";const i="/assets/flow-path.DlGE-P2W.png",p="/assets/command.CjkCU_IR.png",l="/assets/quick-search.BPglrUz9.png",t="/assets/branch-relationship.CTLX574e.awebp",k=JSON.parse('{"title":"概览","description":"","frontmatter":{"menu":"git"},"headers":[],"relativePath":"basic/git/overview.md","filePath":"basic/git/overview.md","lastUpdated":1717729896000}'),r={name:"basic/git/overview.md"},c=e('<h1 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h1><p><img src="'+i+'" alt="alt 属性文本"></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在日常的 Git 操作中，我们通常只需要掌握一小部分简单的命令，如下图所示的六个命令即可：</p><p><img src="'+p+`" alt="alt 属性文本"></p><h2 id="git-命令" tabindex="-1">Git 命令 <a class="header-anchor" href="#git-命令" aria-label="Permalink to &quot;Git 命令&quot;">​</a></h2><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>Git 提供了一个名为 git config 的工具，用于设置控制 Git 外观和行为的配置变量。安装完 Git 后，第一件事就是设置用户名和邮件地址，这些信息会被写入每次的提交中，且不可更改。</p><p>设置提交代码时的用户信息命令如下：</p><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config [--global] user.name &quot;[name]&quot;</span></span>
<span class="line"><span>git config [--global] user.email &quot;[email address]&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h3><p>一个 Git 项目可以通过两种方式初始化：</p><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git init [project-name]: 在当前目录创建或初始化一个Git代码库。</span></span>
<span class="line"><span>git clone url: 克隆一个项目及其整个代码历史。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h3><p>在日常工作中，常用的基本操作如下：</p><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git init                       # 初始化仓库，默认为 master 分支</span></span>
<span class="line"><span>git add .                      # 提交全部文件修改到缓存区</span></span>
<span class="line"><span>git add &lt;具体某个文件路径+全名&gt; # 提交某些文件到缓存区</span></span>
<span class="line"><span>git diff                       # 查看当前代码 add 后，会 add 哪些内容</span></span>
<span class="line"><span>git diff --staged              # 查看现在 commit 提交后，会提交哪些内容</span></span>
<span class="line"><span>git status                     # 查看当前分支状态</span></span>
<span class="line"><span>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;   # 拉取远程仓库的分支与本地当前分支合并</span></span>
<span class="line"><span>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; # 拉取远程仓库的分支与本地某个分支合并</span></span>
<span class="line"><span>git commit -m &quot;&lt;注释&gt;&quot;         # 提交代码到本地仓库，并写提交注释</span></span>
<span class="line"><span>git commit -v                  # 提交时显示所有diff信息</span></span>
<span class="line"><span>git commit --amend [file1] [file2]  # 重做上一次commit，并包括指定文件的新变化</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>关于提交信息的格式，可以遵循以下规则：</p><ul><li>feat: 新特性，添加功能</li><li>fix: 修改 bug</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改，注意不是 CSS 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改，比如构建流程，依赖管理</li></ul><h3 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h3><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch              # 查看本地所有分支</span></span>
<span class="line"><span>git branch -r           # 查看远程所有分支</span></span>
<span class="line"><span>git branch -a           # 查看本地和远程所有分支</span></span>
<span class="line"><span>git merge &lt;分支名&gt;      # 合并分支</span></span>
<span class="line"><span>git merge --abort       # 合并分支出现冲突时，取消合并，回到合并前的状态</span></span>
<span class="line"><span>git branch &lt;新分支名&gt;   # 基于当前分支，新建一个分支</span></span>
<span class="line"><span>git checkout --orphan &lt;新分支名&gt;  # 新建一个空分支（会保留之前分支的所有文件）</span></span>
<span class="line"><span>git branch -D &lt;分支名&gt;   # 删除本地某个分支</span></span>
<span class="line"><span>git push &lt;远程库名&gt; :&lt;分支名&gt;  # 删除远程某个分支</span></span>
<span class="line"><span>git branch &lt;新分支名称&gt; &lt;提交ID&gt;  # 从提交历史恢复某个删除的分支</span></span>
<span class="line"><span>git branch -m &lt;原分支名&gt; &lt;新分支名&gt;  # 分支更名</span></span>
<span class="line"><span>git checkout &lt;分支名&gt;   # 切换到本地某个分支</span></span>
<span class="line"><span>git checkout &lt;远程库名&gt;/&lt;分支名&gt;  # 切换到线上某个分支</span></span>
<span class="line"><span>git checkout -b &lt;新分支名&gt;  # 基于当前分支新建分支，并切换为这个分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="远程同步" tabindex="-1">远程同步 <a class="header-anchor" href="#远程同步" aria-label="Permalink to &quot;远程同步&quot;">​</a></h3><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git fetch [remote]        # 下载远程仓库的所有变动</span></span>
<span class="line"><span>git remote -v             # 显示所有远程仓库</span></span>
<span class="line"><span>git pull [remote] [branch]  # 拉取远程仓库的分支与本地当前分支合并</span></span>
<span class="line"><span>git fetch                 # 获取线上最新版信息记录，不合并</span></span>
<span class="line"><span>git push [remote] [branch]  # 上传本地指定分支到远程仓库</span></span>
<span class="line"><span>git push [remote] --force  # 强行推送当前分支到远程仓库，即使有冲突</span></span>
<span class="line"><span>git push [remote] --all    # 推送所有分支到远程仓库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="撤销" tabindex="-1">撤销 <a class="header-anchor" href="#撤销" aria-label="Permalink to &quot;撤销&quot;">​</a></h3><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout [file]                  # 恢复暂存区的指定文件到工作区</span></span>
<span class="line"><span>git checkout [commit] [file]         # 恢复某个commit的指定文件到暂存区和工作区</span></span>
<span class="line"><span>git checkout .                      # 恢复暂存区的所有文件到工作区</span></span>
<span class="line"><span>git reset [commit]                   # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span>
<span class="line"><span>git reset --hard                     # 重置暂存区与工作区，与上一次commit保持一致</span></span>
<span class="line"><span>git reset [file]                     # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span>
<span class="line"><span>git revert [commit]                  # 后者的所有变化都将被前者抵消，并应用到当前分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="存储操作" tabindex="-1">存储操作 <a class="header-anchor" href="#存储操作" aria-label="Permalink to &quot;存储操作&quot;">​</a></h3><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作，但又不想提交这些杂乱的代码，这时候可以将代码进行存储。</p><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git stash                  # 暂时将未提交的变化移除</span></span>
<span class="line"><span>git stash pop              # 取出储藏中最后存入的工作状态进行恢复，并删除储藏</span></span>
<span class="line"><span>git stash list             # 查看所有储藏中的工作</span></span>
<span class="line"><span>git stash apply &lt;储藏的名称&gt;  # 取出储藏中对应的工作状态进行恢复，不会删除储藏</span></span>
<span class="line"><span>git stash clear            # 清空所有储藏中的工作</span></span>
<span class="line"><span>git stash drop &lt;储藏的名称&gt;   # 删除对应的某个储藏</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="常用命令速查表" tabindex="-1">常用命令速查表 <a class="header-anchor" href="#常用命令速查表" aria-label="Permalink to &quot;常用命令速查表&quot;">​</a></h3><p><img src="`+l+'" alt="alt 属性文本"></p><h2 id="git-规范" tabindex="-1">Git 规范 <a class="header-anchor" href="#git-规范" aria-label="Permalink to &quot;Git 规范&quot;">​</a></h2><p>main 分支作为主干分支，及生产环境，多人协同开发时一定要按照分支规范去建立和提交分支，具体如下：</p><p>main 分支：主干分支，与线上正式版本保持一致 dev 分支：开发分支，始终与 master 分支保持一致 feature 分支：版本开发分支（多个） test 分支：版本测试分支（多个，对应 feature） release 分支：预发布分支 hotfix 分支</p><h3 id="分支关系" tabindex="-1">分支关系 <a class="header-anchor" href="#分支关系" aria-label="Permalink to &quot;分支关系&quot;">​</a></h3><p><img src="'+t+'" alt="alt 属性文本"></p><h3 id="使用说明" tabindex="-1">使用说明 <a class="header-anchor" href="#使用说明" aria-label="Permalink to &quot;使用说明&quot;">​</a></h3><ul><li>多人在同一个分支上开发时，分支名称可按照版本号命名，注意记录版本号对应功能点；</li><li>dev 分支可提交打印说明，注意打印说明格式，其他分支不可提交；</li><li>提交时尽量书写提交代码修改的地方或功能，不要提交无用信息；</li></ul>',36),o=[c];function b(d,u,h,m,g,v){return n(),s("div",null,o)}const _=a(r,[["render",b]]);export{k as __pageData,_ as default};
