import{_ as a,c as e,o as t,a1 as s}from"./chunks/framework.DwaB85k5.js";const i="/assets/stone-age.DsXTjXCr.png",p="/assets/1998-google-page.BXByVqCN.png",l="/assets/history-web.BwD6jubR.png",n="/assets/mpa.Ck5n6uLb.png",S=JSON.parse('{"title":"以前的技术","description":"","frontmatter":{"menu":"Vue"},"headers":[],"relativePath":"basic/vue/stage.md","filePath":"basic/vue/stage.md","lastUpdated":1717270930000}'),o={name:"basic/vue/stage.md"},r=s('<h1 id="以前的技术" tabindex="-1">以前的技术 <a class="header-anchor" href="#以前的技术" aria-label="Permalink to &quot;以前的技术&quot;">​</a></h1><p>Web是World Wide Web的简称，中文译为万维网我们可以将它规划成如下的几个时代来进行理解</p><ul><li>石器时代</li><li>文明时代</li><li>工业革命时代</li><li>百花齐放时代</li></ul><h2 id="石器时代" tabindex="-1">石器时代 <a class="header-anchor" href="#石器时代" aria-label="Permalink to &quot;石器时代&quot;">​</a></h2><p>石器时代指的就是我们的静态网页，可以欣赏一下1997的Apple官网</p><p><img src="'+i+'" alt="alt 属性文本"></p><p>最早的网页是没有数据库的，可以理解成就是一张可以在网络上浏览的报纸，直到CGI技术的出现通过 CGI Perl 运行一小段代码与数据库或文件系统进行交互，如当时的Google（1998年）</p><p><img src="'+p+`" alt="alt 属性文本"></p><h2 id="文明时代" tabindex="-1">文明时代 <a class="header-anchor" href="#文明时代" aria-label="Permalink to &quot;文明时代&quot;">​</a></h2><p>ASP，JSP大家应该都不会太陌生，最早出现于 2005 年左右，先后出现了微软的 ASP 和 Java Server Pages [JSP] 等技术,取代了 CGI ，增强了 WEB 与服务端的交互的安全性，类似于下面这样，其实就是Java + HTML</p><div class="language-jsp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;</span></span>
<span class="line"><span>    pageEncoding=&quot;utf-8&quot;%&gt;&lt;title&gt;JSP demo&lt;/title&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>JSP有一个很大的缺点，就是不太灵活，因为JSP是在服务器端执行的，通常返回该客户端的就是一个HTML文本。我们每次的请求：获取的数据、内容的加载，都是服务器为我们返回渲染完成之后的 DOM，这也就使得我们开发网站的灵活度大打折扣在这种情况下，同年：Ajax火了(小细节，这里为什么说火了，因为 Ajax 技术并不是 2005 年出现的，他的雏形是 1999 年)，现在看来很常见的技术手段，在当时可是珍贵无比</p><h2 id="工业革命时代" tabindex="-1">工业革命时代 <a class="header-anchor" href="#工业革命时代" aria-label="Permalink to &quot;工业革命时代&quot;">​</a></h2><p>到这里大家就更熟悉了，移动设备的普及，Jquery的出现，以及SPA（Single Page Application 单页面应用）的雏形，Backbone EmberJS AngularJS 这样一批前端框架随之出现，但当时SPA的路不好走，例如SEO问题，SPA 过多的页面、复杂场景下 View 的绑定等，都没有很好的处理经过这几年的飞速发展，节约了开发人员大量的精力、降低了开发者和开发过程的门槛，极大提升了开发效率和迭代速度，我们可以称之其为工业时代</p><h2 id="百花齐放时代" tabindex="-1">百花齐放时代 <a class="header-anchor" href="#百花齐放时代" aria-label="Permalink to &quot;百花齐放时代&quot;">​</a></h2><p>这里没有文字，放一张图感受一下</p><p><img src="`+l+'" alt="alt 属性文本"></p><p>PS：这里为什么要说这么多Web的历史，我们可以看到Web技术的变化之大与快，每一种新的技术出现都是一些特定场景的解决方案，那我们今天的主角Vue又是为了解决什么呢？我们接着往下看</p><h2 id="mpa-multipage-page-application" tabindex="-1">MPA（MultiPage-page application） <a class="header-anchor" href="#mpa-multipage-page-application" aria-label="Permalink to &quot;MPA（MultiPage-page application）&quot;">​</a></h2><p>每个页面都是一个主页面，都是独立的当我们在访问另一个页面的时候，都需要重新加载html、css、js文件，公共文件则根据需求按需加载如下图</p><p><img src="'+n+'" alt="alt 属性文本"></p>',21),c=[r];function u(d,h,g,m,b,_){return t(),e("div",null,c)}const q=a(o,[["render",u]]);export{S as __pageData,q as default};
