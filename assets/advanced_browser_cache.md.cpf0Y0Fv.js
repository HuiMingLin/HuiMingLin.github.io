import{_ as e,c as a,o as i,a1 as s}from"./chunks/framework.DwaB85k5.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"menu":"浏览器"},"headers":[],"relativePath":"advanced/browser/cache.md","filePath":"advanced/browser/cache.md","lastUpdated":1717303817000}'),o={name:"advanced/browser/cache.md"},t=s('<p>缓存可以说是性能优化中简单高效的一种优化方式了，它可以显著减少网络传输所带来的损耗。</p><p>对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</p><p>接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：</p><ul><li>缓存位置</li><li>缓存策略</li><li>实际场景应用缓存策略</li></ul><h2 id="缓存位置" tabindex="-1">缓存位置 <a class="header-anchor" href="#缓存位置" aria-label="Permalink to &quot;缓存位置&quot;">​</a></h2><p>从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络</p><ul><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li><li>网络请求</li></ul><p>当 <code>Service Worker</code> 没有命中缓存的时候，我们需要去调用 <code>fetch</code> 函数获取数据。也就是说，如果我们没有在 <code>Service Worker</code> 命中缓存的话，会根据<code>缓存查找优先级</code>去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><p>Memory Cache</p><h3 id="memory-cache" tabindex="-1">Memory Cache <a class="header-anchor" href="#memory-cache" aria-label="Permalink to &quot;Memory Cache&quot;">​</a></h3><p>Memory Cache 也就是内存中的缓存、读取内存中的数据肯定比磁盘快。<strong>但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。</strong> 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</p><p>当我们访问过页面以后，再次刷新页面，可以发现很多数据都 \b 来自于内存缓存</p><p>那么既然内存缓存这么高效，我们是不是 \b 能让数据都存放在内存中呢？</p><p>先说结论，这是<code>不可能</code>的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很玄学了，我查阅了很多资料都没有一个定论。</p><p>当然，我通过一些实践和猜测也得出了一些结论：</p><ul><li>对于大文件来说，大概率是不存储在内存中的，反之优先</li><li>当前系统内存使用率高的话，文件优先存储进硬盘</li></ul><h3 id="disk-cache" tabindex="-1">Disk Cache <a class="header-anchor" href="#disk-cache" aria-label="Permalink to &quot;Disk Cache&quot;">​</a></h3><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache <strong>胜在容量和存储时效性上。</strong></p><p>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 <code>HTTP Herder 中的字段</code>判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。<strong>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</strong></p><h3 id="push-cache" tabindex="-1">Push Cache <a class="header-anchor" href="#push-cache" aria-label="Permalink to &quot;Push Cache&quot;">​</a></h3><p>Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。 <code>并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。</code></p><p>Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。 这里推荐阅读 <a href="https://jakearchibald.com/2017/h2-push-tougher-than-i-thought" target="_blank" rel="noreferrer">HTTP/2 push is tougher than I thought</a> 这篇文章。</p><ul><li>所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好</li><li>可以推送 no-cache 和 no-store 的资源</li><li>一旦连接被关闭，Push Cache 就被释放</li><li>多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存</li><li>Push Cache 中的缓存只能被使用一次</li><li>浏览器可以拒绝接受已经存在的资源推送</li><li>可以给其他域名推送资源</li></ul><h3 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-label="Permalink to &quot;网络请求&quot;">​</a></h3><p>如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。</p><p>那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。</p><h2 id="缓存策略" tabindex="-1">缓存策略 <a class="header-anchor" href="#缓存策略" aria-label="Permalink to &quot;缓存策略&quot;">​</a></h2><p>通常浏览器缓存策略分为两种：<code>强缓存</code>和<code>协商缓存</code>， 并且缓存策略都是通过设置 HTTP Header 来实现的。</p><p><strong>强缓存</strong></p><p>强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control 。 强缓存表示在缓存期间不需要请求，state code 为 200。</p><p>Expires</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Expires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Wed, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Oct </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2018</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 08</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GMT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Expires 是 HTTP/1 的产物，表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。 并且 Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</p><p>Cache-control</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> control;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>Cache-Control</code> 出现于 HTTP/1.1，<strong>优先级高于 <code>Expires</code></strong> 。 该属性值表示资源会在 30 秒后过期，需要再次请求。</p><p>Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令</p><p>从图中我们可以看到，我们可以将多个指令配合起来一起使用，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。</p><p>接下来我们就来学习一些常见指令的作用</p><p><strong>协商缓存</strong></p><p>如果缓存过期了，就需要发起请求验证资源是否有更新。 协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。</p><p>当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。</p><p>Last-Modified 和 If-Modified-Since</p><p>Last-Modified 表示本地文件最后修改日期， If-Modified-Since 会将 Last-Modified 的值发送给服务器， 询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。</p><p>但是 <code>Last-Modified</code> 存在一些弊端：</p><p>如果本地打开缓存文件，即使没有对文件进行修改， 但还是会造成 <code>Last-Modified</code> 被修改，服务端不能命中缓存导致发送相同的资源 因为 <code>Last-Modified</code> 只能以秒计时，如果在不可感知的时间内修改完成文件， 那么服务端会认为资源还是命中了，不会返回正确的资源</p><p>因为以上这些弊端，所以在 HTTP / 1.1 出现了 <code>ETag</code> 。</p><p><strong>ETag 和 If-None-Match</strong></p><p>ETag 类似于文件指纹，<code>If-None-Match</code> 会将当前 <code>ETag</code> 发送给服务器，询问该资源 ETag 是否变动， 有变动的话就将新的资源发送回来。并且 <code>ETag</code> 优先级比 <code>Last-Modified</code> 高。</p><p>以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。 <strong>如果什么缓存策略都没设置，那么浏览器会怎么处理？</strong></p><p>对于这种情况，浏览器会采用一个启发式的算法， 通常会取响应头中的 <code>Date</code> 减去 <code>Last-Modified</code> 值的 10% 作为缓存时间。</p><h2 id="实际场景应用缓存策略" tabindex="-1">实际场景应用缓存策略 <a class="header-anchor" href="#实际场景应用缓存策略" aria-label="Permalink to &quot;实际场景应用缓存策略&quot;">​</a></h2><p>单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。</p><p><strong>频繁变动的资源</strong></p><p>对于频繁变动的资源，首先需要使用 <code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器， 然后配合 ETag 或者 Last-Modified 来验证资源是否有效。 这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><p><strong>代码文件</strong></p><p>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。</p><p>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理， 只有当代码修改后才会生成新的文件名。 基于此，我们就可以给代码文件设置缓存有效期一年 Cache-Control: max-age=31536000， 这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p><h2 id="浏览器渲染原理" tabindex="-1">浏览器渲染原理 <a class="header-anchor" href="#浏览器渲染原理" aria-label="Permalink to &quot;浏览器渲染原理&quot;">​</a></h2><p>执行 js 有一个 js 引擎，那么执行渲染也有一个渲染引擎。通用，渲染引擎在不同的浏览器 中也不是都相同的。比如在 firefox 中叫做 Gecko， 在 Chrome 和 Safari 中都是基于 <strong>WebKit</strong> 开发的。</p><p>主要学习的就是关于 WebKit 这部分的渲染引擎内容</p>',61),p=[t];function r(c,h,d,n,l,k){return i(),a("div",null,p)}const C=e(o,[["render",r]]);export{u as __pageData,C as default};
