import{_ as i,c as s,o as a,a1 as n}from"./chunks/framework.DwaB85k5.js";const l="/assets/load-time.C3dPJ5aj.png",u=JSON.parse('{"title":"概念","description":"","frontmatter":{"menu":"性能指标"},"headers":[],"relativePath":"advanced/browser/indexs.md","filePath":"advanced/browser/indexs.md","lastUpdated":1717275443000}'),e={name:"advanced/browser/indexs.md"},t=n('<p><img src="'+l+`" alt="alt 属性文本"></p><h1 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h1><p>白屏和首屏</p><p>白屏时间 = 地址栏输入网址后回车 - 浏览器出现第一个元素</p><p>首屏时间 = 地址栏输入网址后回车 - 浏览器第一屏渲染完成</p><p>根据白屏和首屏的定义，我们可以用FP和FCP来计算白屏和首屏。</p><p>白屏结束时间 = FP事件触发时间</p><p>首屏结束时间 = FCP事件触发时间</p><p>当然FCP代表第一个内容被渲染出来，有些业务中希望用更关键的内容的渲染来表示首屏，这时候可以用FMP或者LCP来作为首屏的计算指标。</p><h2 id="longtask" tabindex="-1">longTask <a class="header-anchor" href="#longtask" aria-label="Permalink to &quot;longTask&quot;">​</a></h2><p>阻塞主线程达 50 毫秒或以上的任务，会导致以下问题：</p><ul><li>可交互时间延迟</li><li>严重不稳定的交互行为 (轻击、单击、滚动、滚轮等) 延迟（High/variable input latency）</li><li>严重不稳定的事件回调延迟（High/variable event handling latency）</li><li>紊乱的动画和滚动（Janky animations and scrolling）</li></ul><p>任何连续不间断的且主 UI 线程繁忙 50 毫秒及以上的时间区间。比如以下常规场景：</p><ul><li>长耗时的事件回调（long running event handlers）</li><li>代价高昂的回流和其他重绘（expensive reflows and other re-renders）</li><li>浏览器在超过 50 毫秒的事件循环的相邻循环之间所做的工作</li></ul><p>可以通过PerformanceObserver获取。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;longtask candidate: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entry.startTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({entryTypes: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;longtask&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="resource-timing-api" tabindex="-1">Resource Timing API <a class="header-anchor" href="#resource-timing-api" aria-label="Permalink to &quot;Resource Timing API&quot;">​</a></h2><p>通过 Resource Timing API 可以获取和分析应用资源加载的详细网络计时数据，应用程序可以使用时间度量标准来确定加载特定资源所需要的时间，比如 XMLHttpRequest、SVG、图片或者脚本。</p><p>Resource Timing API 为网络事件（如重定向的开始和结束事件、DNS 查找的开始和结束事件、请求开始、响应开始和结束时间等）生成有高分辨率时间戳（high-resolution timestamp）的资源加载时间线，并提供了资源大小和资源类型。</p><h3 id="高分辨率时间戳" tabindex="-1">高分辨率时间戳 <a class="header-anchor" href="#高分辨率时间戳" aria-label="Permalink to &quot;高分辨率时间戳&quot;">​</a></h3><p>代表了高分辨率的时间点。高分辨率时间戳类型是 DOMHighResTimeStamp，用双精度数字（double）表示，它的值是一个离散的时间点或者两个离散时间点之间的时间差。</p><p>DOMHighResTimeStamp 的单位是毫秒（ms），并且应该可以准确到 5 微秒（µs）。但是，如果浏览器无法以提供精确到 5 微秒的时间值（如软硬件限制），则可以将该值表示为以毫秒为单位的精确到毫秒的时间。</p><h3 id="资源载入时间戳" tabindex="-1">资源载入时间戳 <a class="header-anchor" href="#资源载入时间戳" aria-label="Permalink to &quot;资源载入时间戳&quot;">​</a></h3><p>应用程序可以获得用于加载资源的各个阶段的时间戳。</p><ul><li><p>startTime：在资源加载过程开始之前立即返回时间</p></li><li><p>fetchStart：跟踪和重定向处理（如果适用），并在 DNS 查找之前进行。</p></li><li><p>connectStart、 connectEnd：分别是开始连接到服务器和连接建立完成的时间戳。</p><p>如果资源是通过安全连接加载的 secureConnectionStart 的值将会在 connectStart 和 connectEnd 之间。</p></li><li><p>requestStart: 在浏览器开始向服务器请求资源时</p></li><li><p>responseStart: 资源请求首包返回时</p></li><li><p>responseEnd: 资源全部接收完成时。</p></li></ul><p>在非 web 页面本身的域名下，这些属性在默认都会返回 0 值：redirectStart、redirectEnd、domainLookupStart、domainLookupEnd、connectStart、connectEnd、secureConnectionStart、requestStart 和 responseStart。</p><p>需要提供资源的服务器发送 Timing-Allow-Origin HTTP 响应标头并且指定 origin[s] 来源才能允许获取这些被限制的时间戳。</p><h3 id="典型的资源计时指标" tabindex="-1">典型的资源计时指标 <a class="header-anchor" href="#典型的资源计时指标" aria-label="Permalink to &quot;典型的资源计时指标&quot;">​</a></h3><ul><li>测量 TCP 握手时间（connectEnd - connectStart）</li><li>测量 DNS 查找时间（domainLookupEnd - domainLookupStart）</li><li>测量重定向时间（redirectEnd - redirectStart）</li><li>测量临时请求时间（firstInterimResponseStart - requestStart）</li><li>测量请求时间（responseStart - requestStart）</li><li>测量 TLS 协商时间（requestStart - secureConnectionStart）</li><li>测量获取时间（无重定向）（responseEnd - fetchStart）</li><li>测量 ServiceWorker 处理时间（fetchStart - workerStart）</li><li>检查内容是否被压缩（decodedBodySize 不应编码BodySize）</li><li>检查本地缓存是否命中（transferSize 应为 0）</li><li>检查是否使用现代且快速的协议（nextHopProtocol 应为 HTTP/2 或 HTTP/3）</li><li>检查正确的资源是否处于渲染阻塞状态 (renderBlockingStatus)</li></ul><h2 id="加载、渲染性能" tabindex="-1">加载、渲染性能 <a class="header-anchor" href="#加载、渲染性能" aria-label="Permalink to &quot;加载、渲染性能&quot;">​</a></h2><h3 id="load" tabindex="-1">load <a class="header-anchor" href="#load" aria-label="Permalink to &quot;load&quot;">​</a></h3><p>load 事件在整个页面及其所有外部资源（如图像、样式表、脚本等，不包括setTimeout加载的资源）加载完成后触发。这意味着页面的所有内容已经可用，并且可以执行与页面渲染和交互相关的操作。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// load</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// loadEventStart是load事件发送给文档，也即load回调函数开始执行的时间</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// loadEventEnd是load回调函数执行完成的时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loadTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.loadEventStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.fetchStart</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.loadEventEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.navigationStart;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="dcl-domcontentloaded" tabindex="-1">DCL（DOMContentLoaded） <a class="header-anchor" href="#dcl-domcontentloaded" aria-label="Permalink to &quot;DCL（DOMContentLoaded）&quot;">​</a></h3><p>DOM解析完毕</p><p>如果页面有很多外部资源需要加载，那么load 事件会后触发，如果页面内容较多，外部资源较少，那么load事件先触发。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dcl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.domContentLoadedEventEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.domContentLoadedEventStart</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="fp" tabindex="-1">FP <a class="header-anchor" href="#fp" aria-label="Permalink to &quot;FP&quot;">​</a></h3><p>渲染出第一个像素点。FP一般在HTML解析完成或者解析一部分时候触发。</p><p>当需要渲染的节点数少的时候，DCL会在FP前面；当需要渲染的节点数很多时候，DCL会在FP后面。</p><p>有节点不一定有渲染，如果<strong>没有任何样式，或者没有任何内容</strong>，是没有界面的，也不需要渲染，就没有 FP 事件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;first-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].startTime;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="fcp" tabindex="-1">FCP <a class="header-anchor" href="#fcp" aria-label="Permalink to &quot;FCP&quot;">​</a></h3><p>渲染出第一个内容，这里的&quot;内容&quot;可以是文本、图片、canvas。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fcp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;first-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].startTime;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>FCP 性能值：首次内容绘制完成渲染时间应控制在 1.8s 以内。</p><p>我们可以从以下方向点优化 FCP ：</p><ul><li><p>消除阻塞渲染的资源：</p></li><li><p>script 标签：在 head 标签内的，并且没有 defer/async 属性</p></li><li><p>link 标签：没有 disabled 属性，有 media=&quot;all&quot; 属性被认为是渲染阻塞</p></li><li><p>缩小 CSS 体积：写法，压缩 CSS</p></li><li><p>移除未使用的 CSS</p></li><li><p>预连接到所需的来源：link 的 preconnect</p></li><li><p>减少服务器响应时间（TTFB）</p></li><li><p>避免多个页面重定向：浏览器请求已定向的资源时，服务器会返回一个 HTTP 响应，然后浏览器必须在新位置发出另一个 HTTP 请求来检索资源。这种额外的网络传输会使资源加载延迟数百毫秒。</p></li><li><p>预加载关键请求：link 的 preload</p><ul><li><p>避免巨大的网络负载：网络负载的中位数在 1700 到 1900 KiB 之间。 Lighthouse 会标记总网络请求超过 5000 KiB 的页面。将总字节大小保持在 1600 KiB 以下。</p><ul><li><p>缩小和压缩网络有效负载：缩小（代码），数据压缩（Gzip，Brotli）</p></li><li><p>图片使用 Webp</p></li><li><p>JPEG 图片压缩级别设置为 85</p></li></ul></li><li><p>对静态资源使用高效的缓存策略：可缓存资源</p><ul><li><p>字体、图像、媒体文件、脚本或样式表</p></li><li><p>资源具有 200 、 203 、 206 HTTP 状态码</p></li><li><p>资源没有明确的无缓存策略</p></li></ul></li><li><p>避免 DOM 过大：</p><ul><li><p>会造成网络效率和负载性能差</p></li><li><p>页面交互时，会导致重新计算节点的位置和样式，降低渲染速度</p></li><li><p>可能会不知不觉存储大量节点的引用，造成内存过大</p></li></ul></li><li><p>最小化关键请求深度：链的长度越长，下载量越大，对页面加载性能的影响就越大</p><ul><li><p>减少关键资源数量（删除，推迟下载，标记 async 等）</p></li><li><p>优化关键字节数减少下载时间</p></li><li><p>优化剩余关键资源的加载顺序，尽早下载所有关键资源，缩短关键路径长度</p></li></ul></li><li><p>确保文本在网页字体加载期间保持可见：预加载网络字体</p></li><li><p>保持较低的请求数和较小的传输大小： CSS 和 JavaScript ，图片，字体，文件，媒体</p></li></ul></li></ul><h3 id="fmp" tabindex="-1">FMP <a class="header-anchor" href="#fmp" aria-label="Permalink to &quot;FMP&quot;">​</a></h3><p>首次渲染有意义的内容的时间，&quot;有意义&quot;没有一个标准的定义，FMP的计算方法也很复杂。</p><h3 id="si-speed-index" tabindex="-1">SI（Speed Index） <a class="header-anchor" href="#si-speed-index" aria-label="Permalink to &quot;SI（Speed Index）&quot;">​</a></h3><p>衡量页面加载期间内容以视觉方式显示的速度。</p><p>Lighthouse 首先捕获浏览器中页面加载的视频，并计算帧之间的视觉速度。通俗的讲，就是网页从有东西到完全显示内容的可见填充速度。</p><p>优化：</p><ul><li><p>减少主线程工作</p></li><li><p>减少 JavaScript 执行时间</p></li><li><p>确保文本在 webfont 加载期间保持可见</p></li></ul><h3 id="ttfb-time-to-first-byte" tabindex="-1">TTFB（Time to First Byte） <a class="header-anchor" href="#ttfb-time-to-first-byte" aria-label="Permalink to &quot;TTFB（Time to First Byte）&quot;">​</a></h3><p>衡量对资源的请求和响应的第一个字节开始和到达之间时间的指标。</p><p>TTFB 是下列请求节点的时间损耗汇总：</p><ul><li>Redirect time 重定向时延</li><li>Service worker 启动时延（如果适用）</li><li>DNS 查询时延</li><li>建立连接和 TLS 所消耗时延</li><li>请求，直到响应的第一个字节到达为止的时延</li><li>减少连接建立和后端服务的时延将有助于降低 TTFB</li></ul><p>TTFB 少于 0.8秒 。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pageNav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entryList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntriesByType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;navigation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`TTFB: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pageNav</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">responseStart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;navigation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  buffered: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>优化</p><ul><li>托管服务商的基础设施能力不足，无法处理高流量负载</li><li>网络服务器的内存不足，可能导致 系统颠簸</li><li>未经优化的数据库</li><li>不良的数据库服务器配置</li></ul><p>其他优化高 TTFB 时延和相关感知延迟的机会包括：</p><ul><li>避免多次重定向.</li><li>提前向跨域资源源建立连接 Preconnect 。</li><li>将源提交给HSTS预加载列表，以消除 HTTP-HTTPS 重定向延迟。</li><li>使用 HTTP/2 or HTTP/3。</li><li>考虑预测性预取，为没有指定减少数据使用偏好的用户提供快速页面导航。</li><li>在可能和适当的情况下，使用服务器端生成（SSG）来代替SSR的标记。</li></ul><h3 id="lcp-largest-contentful-paint" tabindex="-1">LCP（ Largest Contentful Paint） <a class="header-anchor" href="#lcp-largest-contentful-paint" aria-label="Permalink to &quot;LCP（ Largest Contentful Paint）&quot;">​</a></h3><p>最大内容渲染时间（页面中最大布局变化后的第一次渲染）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entryList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;LCP candidate:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entry.startTime, entry);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;largest-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buffered: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>LCP 指标值：</p><ul><li><p>LCP &lt;= 2.5s 合格</p></li><li><p>2.5s &lt; LCP &lt;= 4s 需要优化</p></li><li><p>LCP &gt; 4s 劣质</p></li></ul><p>导致 LCP 不佳的最常见原因是：</p><ul><li><p>缓慢的服务器响应速度，优化 TTFB</p></li><li><p>阻塞渲染的 JavaScript 和 CSS</p><p>浏览器在能够渲染任何内容之前，需要将 HTML 标记解析为 DOM 树。如果 HTML 解析器遇到任何外部样式表 link 或同步 JavaScript 标签 script，则会暂停解析。</p><p>脚本和样式表都是阻塞渲染的资源，这些资源会使 FCP 延迟，进而导致 LCP 延迟。延迟加载任何非关键的 JavaScript 和 CSS，从而提高网页主要内容的加载速度。</p><ul><li><p>减少 CSS 阻塞时间 通过以下操作确保您的网站上只有最少量的必要 CSS 会阻塞渲染：</p><ul><li><p>削减 CSS（压缩）</p></li><li><p>延迟加载非关键 CSS</p><p>使用 Chrome 开发者工具中的代码覆盖率选项卡查找您网页上任何未使用的 CSS。</p><p>优化方式：</p><p>如果是在您网站的单独页面上使用，可以将所有未使用的 CSS 完全删除或移动到另一个样式表。 对于任何初始渲染时不需要的 CSS，请使用 preload</p></li><li><p>内联关键 CSS</p><p>Critical、CriticalCSS 和 Penthouse 都是提取和内联首屏 CSS 的包</p><p>Critters 是一个 webpack 插件，能够内联关键 CSS 并对其余部分进行懒加载</p></li><li><p>减少 JavaScript 阻塞时间</p><ul><li>削减和压缩 JavaScript 文件</li><li>延迟加载未使用的 JavaScript</li><li>最大限度减少未使用的 polyfill</li></ul></li></ul></li></ul></li><li><p>缓慢的资源加载速度</p><p>影响 LCP 的元素类型为：</p><ul><li>img元素</li><li>内嵌在svg元素内的image元素</li><li>video元素（使用封面图像测量 LCP）</li><li>通过url()函数（而非使用 CSS 渐变）加载的带有背景图像的元素</li><li>包含文本节点或其他行内级文本元素的块级元素</li></ul><p>如果在首屏渲染，加载这些元素所需的时间将对 LCP 产生直接影响。有几种方法可以确保尽快加载这些文件：</p><ul><li><p>优化和压缩图像</p><ul><li>考虑不使用图像。如果图像与内容无关，请将其删除。</li><li>压缩图像（例如使用 Imagemin）</li><li>将图像转换为更新的格式（JPEG 2000、JPEG XR 或 WebP）</li><li>使用响应式图像</li><li>考虑使用图像 CDN</li></ul></li><li><p>预加载重要资源 有时，在某个 CSS 或 JavaScript 文件中声明或使用的重要资源可能会比您所期望的要晚一点被获取，例如深藏在应用程序众多 CSS 文件中的某个字体。</p><p>如果您知道某个特定资源应该被优先获取，请使用 <strong>link preload</strong> 来更加及时地获取该资源。 多种类型的资源都可以进行预加载，但您应该首先侧重于预加载关键资产，例如字体、首屏图像或视频，以及关键路径 CSS 或 JavaScript。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;video&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vid.webm&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;video/webm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font.woff2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font/woff2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> crossorigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>从 Chrome 73 开始，预加载可以与响应式图像一起使用，将两种模式相结合能够实现更快速的图像加载。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wolf.jpg&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  imagesrcset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wolf_400px.jpg 400w, wolf_800px.jpg 800w, wolf_1600px.jpg 1600w&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  imagesizes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;50vw&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>压缩文本文件</p><p>压缩诸如 Gzip 和 Brotli 之类的算法可以显著缩减在服务器和浏览器之间传输的文本文件（HTML、CSS、JavaScript）大小。所有浏览器都有效支持 Gzip，而 Brotli 几乎可以在所有较新的浏览器中使用，并能提供更好的压缩结果。</p><p>压缩您的资源将最大限度地减少这些资源的交付大小、缩短加载时间，从而改善 LCP。</p><p>首先，检查您的服务器是否已经自动压缩文件。大多数托管平台、CDN 和反向代理服务器在默认情况下都会对资产进行压缩编码，或者使您能够轻松配置资产。</p><p>如果您需要对服务器进行修改来使其压缩文件，请考虑使用 <strong>Brotli</strong>，而不是 gzip，因为 Brotli 可以提供更好的压缩率。</p><p>选择您要使用的压缩算法后，请在构建过程中提前压缩资产，而不是在浏览器请求时实时压缩资产。这样能够最大限度地减少服务器开销并防止在发出请求时出现延迟，尤其是在使用高压缩比的情况下。</p></li><li><p>基于网络连接交付不同资产（自适应服务）</p><p>当加载构成页面主要内容的资源时，根据用户的设备或网络条件按需获取不同的资源会是一个有效做法。您可以使用网络状况 API、设备内存 API 和硬件并发 API 来实现这一做法。</p><p>如果您有对初始渲染十分关键的大型资产，那么您可以根据用户的连接或设备采用同一资源的不同变体。例如，对于任何低于 4G 的连接速度，您可以显示图像，而不是视频：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (navigator.connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.connection.effectiveType) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (navigator.connection.effectiveType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 加载视频</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 加载图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>您可以使用的一系列实用属性：</p><ul><li>navigator.connection.effectiveType：有效连接类型</li><li>navigator.connection.saveData：启用/禁用数据保护程序</li><li>navigator.hardwareConcurrency：CPU 核心数</li><li>navigator.deviceMemory：设备内存</li></ul></li><li><p>使用 Service Worker 缓存资产</p><p>Service Worker 可用于缓存任何静态资源，并在收到重复请求时将资源直接提供给浏览器，而无需通过网络。</p><p>使用 Service Worker 预缓存关键资源可以显著减少资源加载时间，特别是对于使用较弱连接重新加载网页（甚至离线访问）的用户。与自己编写自定义 Service Worker 来更新预缓存资产相比，诸如 Workbox 这样的库可以使整个过程更加容易。</p></li></ul></li><li><p>客户端渲染</p><p>在搭建客户端渲染的网站时，请考虑以下优化：</p><ul><li><p>最小化关键 JavaScript</p></li><li><p>使用服务端渲染</p></li><li><p>使用预渲染</p><p>预渲染是一种独立的技巧，该技巧比服务端渲染简单，并且还提供了一种改进应用程序 LCP 的方法。无头浏览器是一种没有用户界面的浏览器，我们会用无头浏览器在搭建期间生成每个路由的静态 HTML 文件。然后可以将这些文件与应用程序所需的 JavaScript 包一起进行运送。</p><p>在使用预渲染后，TTI 仍然会受到负面影响，但服务器响应时间不会像服务端渲染解决方案（仅在接到请求后才对各个页面进行动态渲染）中那样受到很大影响。</p></li></ul></li></ul><h2 id="可交互时间指标" tabindex="-1">可交互时间指标 <a class="header-anchor" href="#可交互时间指标" aria-label="Permalink to &quot;可交互时间指标&quot;">​</a></h2><h3 id="首次可交互时间" tabindex="-1">首次可交互时间 <a class="header-anchor" href="#首次可交互时间" aria-label="Permalink to &quot;首次可交互时间&quot;">​</a></h3><p>首次可交互，即DOM加载并解析完成后，界面上的元素可以交互（如输入框可以输入、按钮可以点击、超长元素可以滚动）。其时间用performance.timing.domInteractive计算</p><p>performance.timing.domInteractive：当前网页DOM结构结束解析、开始加载内嵌资源的时间，document.readyState 变成interactive，并将抛出&quot;readyStateChange&quot;事件（注意只是DOM树解析完成，这时候并没有开始加载网页内的资源）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeToInteractive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.domInteractive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.fetchStart, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//首次可交互时间</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="tti-time-to-interactive" tabindex="-1">TTI（Time to Interactive） <a class="header-anchor" href="#tti-time-to-interactive" aria-label="Permalink to &quot;TTI（Time to Interactive）&quot;">​</a></h3><p>用于标记应用已进行视觉渲染并能可靠响应用户输入的时间点</p><p>完全可交互状态的页面</p><ul><li>页面已经显示有用内容。</li><li>页面上的可见元素关联的事件响应函数已经完成注册。</li><li>事件响应函数可以在事件发生后的 50ms 内开始执行（主线程无 Long Task）。</li></ul><p>计算方法描述如下：</p><p>从 FCP 时间开始，向前搜索一个不小于 5s 的静默窗口期。（静默窗口期定义：窗口所对应的时间内没有 Long Task，且进行中的网络请求数不超过 2 个） 找到静默窗口期后，从静默窗口期向后搜索到最近的一个 Long Task，Long Task 的结束时间即为 TTI。 如果一直找到 FCP 时刻仍然没有找到 Long Task，以 FCP 时间作为 TTI。</p><h3 id="fid-first-input-delay" tabindex="-1">FID（First Input Delay） <a class="header-anchor" href="#fid-first-input-delay" aria-label="Permalink to &quot;FID（First Input Delay）&quot;">​</a></h3><p>用于度量用户第一次与页面交互的延迟时间，是用户第一次与页面交互到浏览器真正能够开始处理事件处理程序以响应该交互的时间。</p><p>100 毫秒或以内，FID 只关注不连续操作对应的输入事件，如点击、轻触和按键。</p><p>优化：</p><ul><li>分割长任务</li><li>优化您的页面，做好交互准备 <ul><li>第一方脚本执行会延迟交互准备</li><li>数据获取会影响交互准备的许多方面</li><li>第三方脚本执行也会加剧交互延迟</li></ul></li><li>使用 Web Worker</li><li>减少 JavaScript 执行时间</li></ul><p>回调的触发时机是用户首次与页面发生交互并得到浏览器响应（点击链接、输入文字等）。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entry.processingStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.startTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first-input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buffer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="tbt-total-blocking-time" tabindex="-1">TBT （ Total Blocking Time） <a class="header-anchor" href="#tbt-total-blocking-time" aria-label="Permalink to &quot;TBT （ Total Blocking Time）&quot;">​</a></h3><p>总阻塞时间，是页面被阻塞响应用户交互的总时间。 TBT = LCP （首次最大内容绘制）和可交互时间之间所有长时间任务的阻塞部分之和。是测量页面加载响应的重要指标。</p><p>超过 50 毫秒的任务即为长任务。 超出 50 毫秒的时间量为阻塞部分。</p><p>优化</p><ul><li><p>减少不必要的 JavaScript 加载、解析或执行。减少 JavaScript 负载、删除未使用的代码或有效加载第三方 JavaScript 可以提高 TBT 分数。</p></li><li><p>减少低效的 JavaScript 语句。例如： document.querySelectorAll(&#39;a&#39;) 会返回所有符合的节点</p></li></ul><h2 id="稳定性指标" tabindex="-1">稳定性指标 <a class="header-anchor" href="#稳定性指标" aria-label="Permalink to &quot;稳定性指标&quot;">​</a></h2><h3 id="cls-cumulative-layout-shift" tabindex="-1">CLS（Cumulative Layout Shift） <a class="header-anchor" href="#cls-cumulative-layout-shift" aria-label="Permalink to &quot;CLS（Cumulative Layout Shift）&quot;">​</a></h3><p>CLS是对在页面的整个生命周期中发生的每一次意外布局变化的最大布局变化得分的度量，布局变化得分越小证明你的页面越稳定。</p><p>计算公式： 布局偏移分数 = 影响分数 x 距离分数</p><p>影响分数： 前一帧和当前帧的所有不稳定元素的课件区域集合（占总可视区域的部分）就是当前帧的影响分数。</p><p>距离分数： 指的是任何不稳定元素在一帧中位移的最大距离（水平或垂直）除以可视区域的最大尺寸维度（宽度或高度，以较大者为准）。</p><p>CLS 分数小于 0.1 。</p><h4 id="如何改善cls" tabindex="-1">如何改善CLS？ <a class="header-anchor" href="#如何改善cls" aria-label="Permalink to &quot;如何改善CLS？&quot;">​</a></h4><p>对大部分网站而言，可以参考以下:</p><ul><li>对图片和视频元素总是设定好尺寸，否则保留所需的空间。这样可以保证浏览器给这些元素分配足够的空间，在加载之后，不会产生布局偏移。如果浏览器支持，可以开启 unsized-media feature policy 的策略。</li><li>永远不要把内容插入到已有元素的上方，除非为了响应用户交互。</li><li>如果需要用到动画，优先使用不会产生布局偏移的CSS属性。</li></ul><h2 id="流畅性指标" tabindex="-1">流畅性指标 <a class="header-anchor" href="#流畅性指标" aria-label="Permalink to &quot;流畅性指标&quot;">​</a></h2><h3 id="fps" tabindex="-1">FPS <a class="header-anchor" href="#fps" aria-label="Permalink to &quot;FPS&quot;">​</a></h3><p>Chrome DevTool 中有一栏 Rendering 中包含 FPS 指标，但目前浏览器标准中暂时没有提供相应 API ，只能手动实现。这里需要借助 requestAnimationFrame 方法模拟实现，浏览器会在下一次重绘之前执行 rAF 的回调，因此可以通过计算每秒内 rAF 的执行次数来计算当前页面的 FPS。</p><p>FPS过低会让用户感觉卡顿，因此这个计算可以用来监控页面卡顿情况。</p><h2 id="core-web-vitals" tabindex="-1">Core Web Vitals <a class="header-anchor" href="#core-web-vitals" aria-label="Permalink to &quot;Core Web Vitals&quot;">​</a></h2><p>Core Web Vitals是谷歌提出的，衡量用户体验的新指标，指标将被纳入谷歌搜索引擎的网页排名。</p><p>Core Web Vitals是用户体验和SEO的重要指标。</p><p>关键的指标包括</p><ul><li>LCP，用来衡量页面加载性能，为了提供良好的用户体验，LCP应该在页面首次开始加载后的2.5秒内发生</li><li>FID，衡量交互性能，为了提供良好的用户体验，页面的FID应该小于100毫秒。</li><li>CLS，测量视觉稳定性。为了提供良好的用户体验，页面应该保持CLS小于0.1。</li></ul><p>Chrome提供了web-vitals库获取3个关键指标的数值。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getLCP, getFID, getCLS } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;web-vitals&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCLS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLCP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="lighthouse" tabindex="-1">lighthouse <a class="header-anchor" href="#lighthouse" aria-label="Permalink to &quot;lighthouse&quot;">​</a></h3><h3 id="chrome-devtool" tabindex="-1">chrome devtool <a class="header-anchor" href="#chrome-devtool" aria-label="Permalink to &quot;chrome devtool&quot;">​</a></h3><p>Chrome 开发者工具中性能面板</p><h3 id="chrome-用户体验报告" tabindex="-1">chrome 用户体验报告 <a class="header-anchor" href="#chrome-用户体验报告" aria-label="Permalink to &quot;chrome 用户体验报告&quot;">​</a></h3>`,121),p=[t];function h(r,k,d,o,E,g){return a(),s("div",null,p)}const y=i(e,[["render",h]]);export{u as __pageData,y as default};
