import{_ as e,c as a,o as i,a1 as v}from"./chunks/framework.DwaB85k5.js";const r="/assets/mvvm.PvMovKA0.png",p=JSON.parse('{"title":"","description":"","frontmatter":{"menu":"Vue"},"headers":[],"relativePath":"basic/vue/overview.md","filePath":"basic/vue/overview.md","lastUpdated":1717270930000}'),u={name:"basic/vue/overview.md"},l=v('<h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p>Vue.js（/vjuː/，或简称为 Vue）是一个用于创建用户界面的开源 JavaScript 框架，也是一个创建单页应用的 Web 应用框架。2016 年一项针对 JavaScript 的调查表明，Vue 有着 89%的开发者满意度。在 GitHub 上，该项目平均每天能收获 95 颗星，为 Github 有史以来星标数第 3 多的项目同时也是一款流行的 JavaScript 前端框架，旨在更好地组织与简化 Web 开发。Vue 所关注的核心是 MVC 模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互 PS: Vue 作者尤雨溪是在为 AngularJS 工作之后开发出了这一框架。他声称自己的思路是提取 Angular 中为自己所喜欢的部分，构建出一款相当轻量的框架最早发布于 2014 年 2 月</p><h3 id="数据驱动-mvvm" tabindex="-1">数据驱动（MVVM) <a class="header-anchor" href="#数据驱动-mvvm" aria-label="Permalink to &quot;数据驱动（MVVM)&quot;">​</a></h3><p>MVVM 表示的是 Model-View-ViewModel</p><ul><li>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</li><li>View：视图层：负责将数据模型转化为 UI 展示出来，可以简单的理解为 HTML 页面</li><li>ViewModel：视图模型层，用来连接 Model 和 View，是 Model 和 View 之间的通信桥梁</li></ul><p>这时候需要一张直观的关系图，如下</p><p><img src="'+r+'" alt="alt 属性文本"></p><p>我们熟知的 JS 框架如 react,vue,angular,ember 都属于 SPA</p><h3 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><p>把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在 Vue 中每一个.vue 文件都可以视为一个组件</p><h4 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h4><ul><li>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</li><li>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单- 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li><li>Vue 所有的界面事件，都是只去操作数据的，Jquery 操作 DOM</li><li>Vue 所有界面的变动，都是根据数据自动绑定出来的，Jquery 操作 DOM</li></ul><h3 id="指令系统" tabindex="-1">指令系统 <a class="header-anchor" href="#指令系统" aria-label="Permalink to &quot;指令系统&quot;">​</a></h3><p>解释：指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p><p>常用的指令</p><ul><li>条件渲染指令 v-if</li><li>列表渲染指令 v-for</li><li>属性绑定指令 v-bind</li><li>事件绑定指令 v-on</li><li>双向数据绑定指令 v-model</li></ul><p>没有指令之前我们是怎么做的？是不是先要获取到 DOM 然后在....干点啥</p><h3 id="vue-和-react-对比" tabindex="-1">Vue 和 React 对比 <a class="header-anchor" href="#vue-和-react-对比" aria-label="Permalink to &quot;Vue 和 React 对比&quot;">​</a></h3><h4 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h4><ul><li>都有组件化思想</li><li>都支持服务器端渲染</li><li>都有 Virtual DOM（虚拟 dom）</li><li>数据驱动视图</li><li>都有支持 native 的方案：Vue 的 weex、React 的 React native</li><li>都有自己的构建工具：Vue 的 vue-cli、React 的 Create React App</li></ul><h4 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h4><ul><li>数据流向的不同。react 从诞生开始就推崇单向数据流，而 Vue 是双向数据流</li><li>数据变化的实现原理不同。react 使用的是不可变数据，而 Vue 使用的是可变的数据</li><li>组件化通信的不同。react 中我们通过使用回调函数来进行通信的，而 Vue 中子组件向父组件传递消息有两种方式：事件和回调函数</li><li>diff 算法不同。react 主要使用 diff 队列保存需要更新哪些 DOM，得到 patch 树，再统一操作批量更新 DOM。Vue 使用双向指针，边对比，边更新 DOM</li></ul><h2 id="历史" tabindex="-1">历史 <a class="header-anchor" href="#历史" aria-label="Permalink to &quot;历史&quot;">​</a></h2><div><a href="/basic/vue/stage">历史</a></div><h2 id="spa" tabindex="-1">SPA <a class="header-anchor" href="#spa" aria-label="Permalink to &quot;SPA&quot;">​</a></h2><div><a href="/basic/vue/spa">SPA</a></div><h2 id="vue2" tabindex="-1">vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;vue2&quot;">​</a></h2><div><a href="/basic/vue/vue2/vue2">概览</a></div><div><a href="/basic/vue/vue2/life-cycle">生命周期</a></div><div><a href="/basic/vue/vue2/slot">插槽</a></div><div><a href="/basic/vue/vue2/v-show-v-if">v-show和v-if</a></div><div><a href="/basic/vue/vue2/key">vue中key</a></div><div><a href="/basic/vue/vue2/v-if-v-for">v-if和v-for的优先级</a></div><div><a href="/basic/vue/vue2/modifier">修饰符</a></div><div><a href="/basic/vue/vue2/filter">filter</a></div><div><a href="/basic/vue/vue2/directive">directive</a></div><div><a href="/basic/vue/vue2/keep-alive">Keep-alive</a></div><div><a href="/basic/vue/vue2/mixin">Mixin</a></div><div><a href="/basic/vue/vue2/component-plugin">组件和插件</a></div><div><a href="/basic/vue/vue2/communication">通信</a></div><div><a href="/basic/vue/vue2/data-binding">数据绑定</a></div><div><a href="/basic/vue/vue2/axios">axios</a></div><div><a href="/basic/vue/vue2/virtual-dom">virtual dom</a></div><div><a href="/basic/vue/vue2/$nextTick">$nextTick</a></div><div><a href="/basic/vue/vue2/observable">Vue.observable</a></div><div><a href="/basic/vue/vue2/diff">diff</a></div><div><a href="/basic/vue/vue2/instance">Vue实例挂载过程</a></div><div><a href="/basic/vue/vue2/handle-error">错误</a></div><div><a href="/basic/vue/vue2/deployment-404">部署后页面404</a></div><div><a href="/basic/vue/vue2/real-project">真实vue项目</a></div><div><a href="/basic/vue/vue2/source-code">源码</a></div><h2 id="vue3" tabindex="-1">vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;vue3&quot;">​</a></h2><div><a href="/basic/vue/vue3">vue3</a></div><h2 id="vue-生态" tabindex="-1">Vue 生态 <a class="header-anchor" href="#vue-生态" aria-label="Permalink to &quot;Vue 生态&quot;">​</a></h2><div><a href="/basic/vue/vue-ecology">Vue 生态</a></div><h2 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h2><div><a href="/basic/vue/ssr">SSR</a></div><h2 id="企业级组件系统架构" tabindex="-1">企业级组件系统架构 <a class="header-anchor" href="#企业级组件系统架构" aria-label="Permalink to &quot;企业级组件系统架构&quot;">​</a></h2><div><a href="/basic/vue/enterprise">企业级组件系统架构</a></div>',59),d=[l];function t(o,c,h,s,n,b){return i(),a("div",null,d)}const m=e(u,[["render",t]]);export{p as __pageData,m as default};
