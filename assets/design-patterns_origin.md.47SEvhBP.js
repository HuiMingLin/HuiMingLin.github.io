import{_ as e,c as o,o as t,a1 as l}from"./chunks/framework.DwaB85k5.js";const k=JSON.parse('{"title":"起源","description":"","frontmatter":{"menu":"设计模式","name":"概览"},"headers":[],"relativePath":"design-patterns/origin.md","filePath":"design-patterns/origin.md","lastUpdated":1717277724000}'),a={name:"design-patterns/origin.md"},i=l('<h1 id="起源" tabindex="-1">起源 <a class="header-anchor" href="#起源" aria-label="Permalink to &quot;起源&quot;">​</a></h1><blockquote><ul><li>设计模式并非是软件开发的专业术语。实际上，“模式”最早诞生于建筑学。 20世纪70年代 哈佛大学建筑学博士Christopher Alexander和他的研究团队花了约20年的时间， 研究了为解决同一个问题而设计出的不同建筑结构，从中发现了那些高质量设计中的相似性，并且用“模式”来指 代这种相似性。</li></ul></blockquote><blockquote><ul><li>受Christopher Alexander工作的启发，Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides四人(人称Gang Of Four ，GoF) 把这种“模式”观点应用于面向对象的软件设计中， 并且总结了23种常见的软件开发设计模式，录入《设计模式:可复用面向对象软件的基础》一书。</li></ul></blockquote><blockquote><ul><li>设计模式的定义是:在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案。</li></ul></blockquote><blockquote><ul><li>通俗一点说，设计模式是在某种场合下对某个问题的一种解决方案。 如果再通俗一点说，设计模式就是给面向对象软件开发中的一些好的设计取个名字。</li></ul></blockquote><blockquote><ul><li>在 JavaScript 中，当我们对一个变量赋值时，显然不需要考虑它的类型，因此，JavaScript是一门典型的动态类型语言。</li></ul></blockquote><blockquote><ul><li>动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。 由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。</li></ul></blockquote><blockquote><ul><li>这一切都建立在鸭子类型(duck typing)的概念上，鸭子类型的通俗说法是:“如果它走起 路来像鸭子，叫起来也是鸭子，那么它就是鸭子。”</li></ul></blockquote>',8),r=[i];function c(n,u,s,_,d,p){return t(),o("div",null,r)}const b=e(a,[["render",c]]);export{k as __pageData,b as default};
