import{_ as e,c as a,o as i,a1 as t}from"./chunks/framework.DwaB85k5.js";const m=JSON.parse('{"title":"移动端","description":"","frontmatter":{"menu":"mobile-terminal"},"headers":[],"relativePath":"advanced/cross-end/mobile-terminal/overview.md","filePath":"advanced/cross-end/mobile-terminal/overview.md","lastUpdated":1717275443000}'),s={name:"advanced/cross-end/mobile-terminal/overview.md"},n=t('<h1 id="移动端" tabindex="-1">移动端 <a class="header-anchor" href="#移动端" aria-label="Permalink to &quot;移动端&quot;">​</a></h1><h2 id="设备像素" tabindex="-1">设备像素 <a class="header-anchor" href="#设备像素" aria-label="Permalink to &quot;设备像素&quot;">​</a></h2><p>设备像素（Device Pixel），也称为设备物理像素，是显示设备上的最小物理单位。它代表屏幕上的一个点，能够显示不同颜色和图像。设备像素是显示屏的固有属性，不可改变，每台设备在制造时都确定了其设备像素数量。</p><p>在高分辨率的显示屏上，设备像素更加密集，显示效果更加细腻。例如，若两台手机屏幕尺寸相同，但一台设备像素更多，则其显示效果更加清晰。</p><h2 id="css像素" tabindex="-1">CSS像素 <a class="header-anchor" href="#css像素" aria-label="Permalink to &quot;CSS像素&quot;">​</a></h2><p>CSS像素（CSS Pixel，px）是Web开发中常用的长度单位。在CSS规范中，长度单位分为绝对单位和相对单位，而CSS像素是一种相对单位。大多数情况下，1个CSS像素对应1个设备独立像素，即1:1的关系。</p><p>然而，有时候1个CSS像素可能对应多个设备像素，这取决于设备的DPR（设备像素比）。</p><h2 id="设备独立像素" tabindex="-1">设备独立像素 <a class="header-anchor" href="#设备独立像素" aria-label="Permalink to &quot;设备独立像素&quot;">​</a></h2><p>设备独立像素（Device Independent Pixel），也称为逻辑像素或密度无关像素，是一个与设备无关的抽象单位。它是开发者可以通过程序控制使用的虚拟像素，目的是为了解决不同设备分辨率不同的问题。</p><p>设备独立像素可以通过window.screen.width和window.screen.height来获取。而设备像素比（DPR）可以通过window.devicePixelRatio来获取。</p><p>设备独立像素的引入使得开发者在不同设备上进行页面设计时更加灵活，不用考虑具体的物理像素数目，统一使用设备独立像素进行布局。</p><h2 id="dpr-设备像素比" tabindex="-1">DPR（设备像素比） <a class="header-anchor" href="#dpr-设备像素比" aria-label="Permalink to &quot;DPR（设备像素比）&quot;">​</a></h2><p>DPR（Device Pixel Ratio）是设备像素和设备独立像素之间的转换关系。它表示1个设备独立像素由多少个设备像素组成。</p><p>计算公式如下：</p><p>DPR = 设备像素 / 设备独立像素</p><p>举例来说，当DPR为2时，1个设备独立像素由2个设备像素组成；当DPR为3时，1个设备独立像素由3个设备像素组成。</p><p>DPR通常用于移动设备，不同的移动设备可能有不同的DPR，用于适配不同分辨率的屏幕。</p><h2 id="ppi-每英寸像素" tabindex="-1">PPI（每英寸像素） <a class="header-anchor" href="#ppi-每英寸像素" aria-label="Permalink to &quot;PPI（每英寸像素）&quot;">​</a></h2><p>PPI（Pixel Per Inch），也称为每英寸像素，表示屏幕每英寸所包含的像素点数目，也可以理解为屏幕的像素密度。PPI的数值越高，屏幕的显示越清晰。</p><p>PPI是一个指标，用来描述屏幕像素的密度，并与屏幕的尺寸相关。例如，同样尺寸的屏幕，PPI越高，说明屏幕像素更密集，显示效果更细腻。</p><h2 id="适配方案" tabindex="-1">适配方案 <a class="header-anchor" href="#适配方案" aria-label="Permalink to &quot;适配方案&quot;">​</a></h2><p>在移动设备开发中，为了确保页面在不同设备上显示良好，我们需要考虑设备的DPR和PPI，以及设备独立像素。以下是一些常用的适配方案：</p><p>使用rem单位：rem单位是相对于根元素（html元素）的字体大小进行计算的长度单位。通过动态设置根元素的字体大小，可以根据不同设备的DPR进行适配。</p><p>使用viewport标签：通过设置viewport标签，可以控制页面的缩放和布局。设置</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以让页面宽度等于设备宽度，并且不进行缩放。</p><p>使用媒体查询：媒体查询可以根据不同设备的宽度、高度、DPR等条件来应用不同的CSS样式，从而实现页面的适配。</p><p>使用flexbox和grid布局：flexbox和grid布局可以更加灵活地进行页面布局，适应不同设备的屏幕尺寸和分辨率。</p><p>使用图片的@2x和@3x版本：对于高分辨率设备，提供相应的高清晰度图片，以确保图片显示效果清晰。</p>',29),p=[n];function r(l,h,o,d,c,P){return i(),a("div",null,p)}const u=e(s,[["render",r]]);export{m as __pageData,u as default};
