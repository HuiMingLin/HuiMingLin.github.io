(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{408:function(e,s,t){"use strict";t.r(s);var n=t(25),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[e._v("#")]),e._v(" 编码")]),e._v(" "),t("h2",{attrs:{id:"escape函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#escape函数"}},[e._v("#")]),e._v(" escape函数")]),e._v(" "),t("p",[e._v("首先，我们来了解一下"),t("code",[e._v("escape")]),e._v("函数。这是一个老旧的函数，现在已经不再推荐使用，因为它不能处理所有的Unicode字符。"),t("code",[e._v("escape")]),e._v("函数会将传入的字符串转化为十六进制的escape序列，这样的序列以%开头。")]),e._v(" "),t("p",[e._v("然而，这个函数只能正确处理ASCII字符（字符代码小于等于255的字符）。对于ASCII字符代码大于255的字符，escape函数会先将其转化为Unicode转义序列（例如，"),t("code",[e._v("\\u20AC")]),e._v("），然后再对这个转义序列进行编码。这种处理方式会导致一些问题。比如，对于欧元符号（"),t("code",[e._v("€")]),e._v("），它的Unicode代码是"),t("code",[e._v("20AC")]),e._v("，"),t("code",[e._v("escape")]),e._v("函数会将其转化为"),t("code",[e._v("%u20AC")]),e._v("，而不是正确的"),t("code",[e._v("%E2%82%AC")]),e._v("。")]),e._v(" "),t("p",[e._v("因此，我们不应该再使用escape函数来处理URL编码。")]),e._v(" "),t("h2",{attrs:{id:"encodeuri函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodeuri函数"}},[e._v("#")]),e._v(" encodeURI函数")]),e._v(" "),t("p",[e._v("接下来，我们来看看encodeURI函数。这个函数用于编码完整的URL。它会将非法的URL字符转化为各自的十六进制表示，以%开头。")]),e._v(" "),t("p",[e._v("然而，encodeURI函数并不会对所有的字符进行编码。一些在URL中有特殊含义的字符，例如/，:，#等，以及ASCII字母，数字和一些符号（- _ . ! ~ * ' ( )），不会被encodeURI函数编码。这是因为这些字符在URL中是合法的，可以直接使用。")]),e._v(" "),t("p",[e._v("下面是一个encodeURI函数的例子：")]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" url "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'https://example.com/Hello World!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("encodeURI")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// https://example.com/Hello%20World!")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("在这个例子中，encodeURI函数将空格字符编码为%20，因为空格在URL中是不合法的。而其他的字符，如/和:等，都没有被编码。")]),e._v(" "),t("h2",{attrs:{id:"encodeuricomponent函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodeuricomponent函数"}},[e._v("#")]),e._v(" encodeURIComponent函数")]),e._v(" "),t("p",[e._v("最后，我们来看看encodeURIComponent函数。这个函数用于编码URL的组成部分，比如查询参数。它会将所有非法的URL字符以及一些有特殊含义的字符（如/，:，#等）转化为各自的十六进制表示。")]),e._v(" "),t("p",[e._v("这意味着encodeURIComponent函数会对更多的字符进行编码。在大多数情况下，我们都应该使用"),t("code",[e._v("encodeURIComponent")]),e._v("函数来编码URL的组成部分。")]),e._v(" "),t("p",[e._v("下面是一个encodeURIComponent函数的例子：")]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" query "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/Hello World!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("encodeURIComponent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// %2FHello%20World%21")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("在这个例子中，encodeURIComponent函数将/和空格字符都编码了，因为这些字符在URL的查询参数中都是不合法的。")]),e._v(" "),t("p",[e._v("总的来说，当我们需要编码完整的URL时，应该使用encodeURI函数；而当我们需要编码URL的组成部分，比如查询参数，应该使用encodeURIComponent函数。不再推荐使用escape函数，因为它不能正确处理所有的字符。")])])}),[],!1,null,null,null);s.default=a.exports}}]);