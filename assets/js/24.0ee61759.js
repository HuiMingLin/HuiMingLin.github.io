(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{223:function(t,n,a){"use strict";a.r(n);var e=a(0),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" ** 原型 **")]),t._v(" "),a("p",[a("a",{attrs:{href:"/pages-design-patterns-creation-type-creation-type#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-%EF%BC%88%E5%8E%9F%E5%9E%8B%EF%BC%89"}},[t._v("(原型模式)")])]),t._v(" "),a("h2",{attrs:{id:"this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" ** this **")]),t._v(" "),a("p",[t._v("** 在运行时基于函数的执行环境决定，并非函数被声明时的执行环境 **")]),t._v(" "),a("p",[t._v("除去不常用的 "),a("code",[t._v("with")]),t._v(" 和 "),a("code",[t._v("eval")]),t._v("， 剩下的大致分为 4 种：")]),t._v(" "),a("ul",[a("li",[t._v("作为对象的方法调用 （事件绑定函数调用也是，刚学可能不知道）")]),t._v(" "),a("li",[t._v("作为普通函数调用")]),t._v(" "),a("li",[t._v("作为构造器调用")]),t._v(" "),a("li",[t._v("Function.prototype.call 或 Function.prototype.apply 或 Function.prototype.bind 调用。")])]),t._v(" "),a("h3",{attrs:{id:"_1、作为对象的方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、作为对象的方法调用"}},[t._v("#")]),t._v(" 1、作为对象的方法调用")]),t._v(" "),a("p",[t._v("当函数作为对象的方法被调用时，this 指向当前对象")]),t._v(" "),a("ul",[a("li",[t._v("普通对象")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  var obj = {\n    a: 1,\n    getA: function(){\n      alert ( this === obj ); // 输出:true\n      alert ( this.a ); // 输出: 1\n    }\n  }\n  obj.getA();\n")])])]),a("ul",[a("li",[t._v("事件绑定函数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  var btn = document.getElementById("btn")\n  btn.onclick = function () {\n    // do sth.\n  }\n  btn.addEventListener(event type, function ()) {\n    // do sth.\n  }\n')])])]),a("h3",{attrs:{id:"_2、作为普通函数调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、作为普通函数调用"}},[t._v("#")]),t._v(" 2、作为普通函数调用")]),t._v(" "),a("p",[t._v("当函数作为普通函数调用时，this 指向全局对象，即为 window")]),t._v(" "),a("ul",[a("li",[t._v("普通创建函数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  window.name = "globalName"\n  var getName = function () {\n    return this.name\n  }\n  console.log(getName()) // globalName\n')])])]),a("ul",[a("li",[t._v("将某个对象的方法复制给一个全局变量")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  window.name = "globalName"\n  var myObjct = {\n    name: "myObjct",\n    getName: function () {\n      var abc = function () {\n        return this.name\n      }\n      return this.name\n    }\n  }\n  var getName = myObjct.getName\n  console.log(getName()) // globalName\n')])])]),a("ul",[a("li",[t._v("对象方法的内部有一个局部函数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  window.name = "globalName"\n  var myObjct = {\n    name: "myObjct",\n    getName: function () {\n      var abc = function () {\n        return this.name\n      }\n      return abc()\n    }\n  }\n  console.log(myObjct.getName()) // globalName\n')])])]),a("h3",{attrs:{id:"_3、作为构造器调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、作为构造器调用"}},[t._v("#")]),t._v(" 3、作为构造器调用")]),t._v(" "),a("p",[t._v("当函数作为构造器调用时，this 指向当前实例对象。")]),t._v(" "),a("p",[t._v("当用 "),a("code",[t._v("new")]),t._v(" 运算符调用函数时，该函数总会返回一个对象，\n通常情况下，构造器里的 this 就指向返回的这个对象。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    var Contructor = function () {\n        this.name = "class"\n    }\n    var obj = new Contructor()\n    console.log(obj.name) // class\n')])])]),a("p",[t._v("当使用 new 调用构造器的时候，\n还需要注意一点，如果构造器显示的返一个 object 类型的对象，\n那么最终会返回这个对象，而不是我们之前的 "),a("code",[t._v("this")]),t._v("。\n如果不显示返回数据，或者返回一个不是对象的数据，就不会造成这个问题。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var Contructor = function () {\n        this.name = \"class\"\n        return {\n            name: 'single'\n        }\n    }\n    var obj = new Contructor()\n    console.log(obj.name) // single\n")])])]),a("h3",{attrs:{id:"_4、function-prototype-call-或-function-prototype-apply-或-function-prototype-bind-调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、function-prototype-call-或-function-prototype-apply-或-function-prototype-bind-调用"}},[t._v("#")]),t._v(" 4、Function.prototype.call 或 Function.prototype.apply 或 Function.prototype.bind 调用")]),t._v(" "),a("p",[t._v("可以动态的修改当前 this 对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var obj1 = {\n        name: 'obj1',\n        getName: function () {\n          return this.name;\n        }\n    };\n    var obj2 = {\n        name: 'obj2'\n    };\n    console.log(obj1.getName())             // obj1\n    console.log(obj1.getName.call(obj2))    // obj2\n    console.log(obj1.getName.apply(obj2))   // obj2\n    console.log(obj1.getName.bind(obj2)())  // obj2\n")])])]),a("h2",{attrs:{id:"借用其他对象的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#借用其他对象的方法"}},[t._v("#")]),t._v(" ** 借用其他对象的方法 **")]),t._v(" "),a("p",[t._v("实现类似继承")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    var A = function( name ){\n      this.name = name;\n    };\n    var B = function(){\n      A.apply( this, arguments );\n    };\n    B.prototype.getName = function(){\n      return this.name;\n    };\n    var b = new B( 'sven' ）\n    console.log( b.getName() ); // 输出: 'sven'\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);