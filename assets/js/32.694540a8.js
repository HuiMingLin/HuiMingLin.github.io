(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{389:function(e,s,r){"use strict";r.r(s);var n=r(25),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"service-worker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[e._v("#")]),e._v(" Service Worker")]),e._v(" "),r("p",[e._v("丰富的离线体验、定期的后台同步以及推送通知等通常需要将面向本机应用的功能将引入到网页应用中。\nService Worker 提供所有这些功能所依赖的技术基础。")]),e._v(" "),r("p",[r("code",[e._v("Service Worker")]),e._v(" 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能， 它们已包括如 "),r("code",[e._v("推送通知")]),e._v(" 和 "),r("code",[e._v("后台同步")]),e._v(" 等功能。\n使用 Service Worker 的话，传输协议必须为 "),r("code",[e._v("HTTPS")]),e._v("。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。")]),e._v(" "),r("p",[e._v("Service Worker 相关注意事项：")]),e._v(" "),r("p",[e._v("-它是一种 "),r("code",[e._v("JavaScript Worker")]),e._v("，无法直接访问 DOM。\nService Worker 通过响应 "),r("code",[e._v("postMessage")]),e._v(" 接口发送的消息来与其控制的页面通信，页面可在必要时对 DOM 执行操作。\n-Service Worker 是一种可编程网络代理，让您能够控制页面所发送网络请求的处理方式。\n-Service Worker 在不用时会被中止，并在下次有需要时重启，\n因此，您不能依赖 Service Worker onfetch 和 onmessage 处理程序中的全局状态。\n如果存在您需要持续保存并在重启后加以重用的信息，Service Worker 可以访问 "),r("code",[e._v("IndexedDB API")]),e._v("。\n-Service Worker 广泛地利用了 promise")]),e._v(" "),r("h4",{attrs:{id:"service-worker-生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#service-worker-生命周期"}},[e._v("#")]),e._v(" Service Worker 生命周期")]),e._v(" "),r("p",[e._v("目的：")]),e._v(" "),r("ul",[r("li",[e._v("实现离线优先。")]),e._v(" "),r("li",[e._v("允许新 Service Worker 自行做好运行准备，无需中断当前的 Service Worker。")]),e._v(" "),r("li",[e._v("确保整个过程中作用域页面由同一个 Service Worker（或者没有 Service Worker）控制。")]),e._v(" "),r("li",[e._v("确保每次只运行网站的一个版本。")])]),e._v(" "),r("p",[e._v("最后一点非常重要。如果没有 Service Worker，用户可以将一个标签加载到您的网站，稍后打开另一个标签。\n这会导致同时运行网站的两个版本。有时候这样做没什么问题，但如果您正在处理存储，\n那么，出现两个标签很容易会让您的操作中断，因为它们的共享的存储空间管理机制大相径庭。\n这可能会导致错误，更糟糕的情况是导致数据丢失。")]),e._v(" "),r("p",[e._v("Service Worker 的生命周期完全独立于网页。")]),e._v(" "),r("p",[e._v("要为网站安装服务工作线程，您需要先在页面的 JavaScript 中注册。 注册服务工作线程将会使浏览器在后台启动服务工作线程安装步骤。")]),e._v(" "),r("p",[e._v("在安装过程中，您通常需要缓存某些静态资产。 如果所有文件均已成功缓存，那么 Service Worker 就安装完毕。\n如果任何文件下载失败或缓存失败，那么安装步骤将会失败，Service Worker 就无法激活（也就是说， 不会安装）。\n如果发生这种情况，不必担心，它下次会再试一次。 但这意味着，如果安装完成，您可以知道您已在缓存中获得那些静态资产。")]),e._v(" "),r("p",[e._v("安装之后，接下来就是激活步骤，这是管理旧缓存的绝佳机会，我们将在 Service Worker 的更新部分对此详加介绍。")]),e._v(" "),r("p",[e._v("激活之后，Service Worker 将会对其作用域内的所有页面实施控制，不过，首次注册该 Service Worker 的页面需要再次加载才会受其控制。\n服务工作线程实施控制后，它将处于以下两种状态之一：")]),e._v(" "),r("ul",[r("li",[e._v("服务工作线程终止以节省内存")]),e._v(" "),r("li",[e._v("处理获取和消息事件，从页面发出网络请求或消息")])]),e._v(" "),r("p",[e._v("以下是 Service Worker 初始安装时的简化生命周期。")]),e._v(" "),r("p",[r("img",{attrs:{src:"/assets/sw-lifecycle.png",alt:""}})]),e._v(" "),r("h4",{attrs:{id:"先决条件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#先决条件"}},[e._v("#")]),e._v(" 先决条件")]),e._v(" "),r("p",[e._v("** 浏览器支持 **")]),e._v(" "),r("p",[e._v("可用的浏览器日益增多。 Service Worker 受 Chrome、Firefox 和 Opera 支持。 Microsoft Edge 现在表示公开支持。\n甚至 Safari 也暗示未来会进行相关开发。 您可以在 Jake Archibald 的 is Serviceworker ready 网站上查看所有浏览器的支持情况 。")]),e._v(" "),r("p",[e._v("** 您需要 HTTPS **")]),e._v(" "),r("p",[e._v("在开发过程中，可以通过 localhost 使用 Service Worker，但如果要在网站上部署 Service Worker，则需要在服务器上设置 HTTPS。")]),e._v(" "),r("p",[e._v("使用服务工作线程，您可以劫持连接、编撰以及过滤响应。 这是一个很强大的工具。\n您可能会善意地使用这些功能，但中间人可会将其用于不良目的。\n为避免这种情况，可仅在通过 HTTPS 提供的页面上注册 Service Worker，\n如此我们便知道浏览器接收的 Service Worker 在整个网络传输过程中都没有被篡改。")]),e._v(" "),r("p",[e._v("Github 页面 通过 HTTPS 提供，因此这些页面是托管演示的绝佳位置。")]),e._v(" "),r("p",[e._v("如果想要向服务器添加 HTTPS，您需要获得 TLS 证书并在服务器上进行设置。")]),e._v(" "),r("p",[e._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、\n如何匹配缓存、如何读取缓存，并且缓存是持续性的。")]),e._v(" "),r("p",[e._v("Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，\n那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。\n以下是这个步骤的实现：")]),e._v(" "),r("h4",{attrs:{id:"注册-service-worker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注册-service-worker"}},[e._v("#")]),e._v(" 注册 Service Worker")]),e._v(" "),r("p",[e._v("若要安装 Service Worker，您需要通过在页面中对其进行注册来启动安装。 这将告诉浏览器 Service Worker JavaScript 文件的位置。")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function() {\n      navigator.serviceWorker.register('/sw.js').then(function(registration) {\n        // Registration was successful\n        console.log('ServiceWorker registration successful with scope: ', registration.scope);\n      }, function(err) {\n        // registration failed :(\n        console.log('ServiceWorker registration failed: ', err);\n      });\n    });\n  }\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br")])]),r("p",[e._v("此代码用于检查 Service Worker API 是否可用，如果可用，则在 "),r("code",[e._v("页面加载后注册")]),e._v(" 位于 /sw.js 的 Service Worker。")]),e._v(" "),r("p",[e._v("每次页面加载无误时，即可调用 register()；浏览器将会判断服务工作线程是否已注册并做出相应的处理。")]),e._v(" "),r("p",[e._v("register() 方法的精妙之处在于服务工作线程文件的位置。 您会发现在本例中服务工作线程文件位于根网域。\n这意味着服务工作线程的作用域将是整个来源。 换句话说，Service Worker 将接收此网域上所有事项的 fetch 事件。\n如果我们在 "),r("code",[e._v("/example/sw.js")]),e._v(" 处注册 Service Worker 文件，\n则 Service Worker 将只能看到网址以 /example/ 开头（即 /example/page1/、/example/page2/）的页面的 fetch 事件。\n上面是 "),r("code",[e._v("/sw.js")])]),e._v(" "),r("h4",{attrs:{id:"安装-service-worker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装-service-worker"}},[e._v("#")]),e._v(" 安装 Service Worker")]),e._v(" "),r("p",[e._v("在受控页面启动注册流程后，我们来看看处理 install 事件的 Service Worker 脚本。")]),e._v(" "),r("p",[e._v("最基本的例子是，您需要为安装事件定义回调，并决定想要缓存的文件。")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  self.addEventListener('install', function(event) {\n    // Perform install steps\n  });\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br")])]),r("p",[e._v("在 install 回调的内部，我们需要执行以下步骤：")]),e._v(" "),r("p",[e._v("-打开缓存 -缓存文件 -确认所有需要的资产是否已缓存")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  var CACHE_NAME = 'my-site-cache-v1';\n  var urlsToCache = [\n    '/',\n    '/styles/main.css',\n    '/script/main.js'\n  ];\n\n  self.addEventListener('install', function(event) {\n    // Perform install steps\n    event.waitUntil(\n      caches.open(CACHE_NAME)\n        .then(function(cache) {\n          console.log('Opened cache');\n          return cache.addAll(urlsToCache);\n        })\n    );\n  });\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br")])]),r("p",[e._v("此处，我们以所需的缓存名称调用 caches.open()，之后再调用 cache.addAll() 并传入文件数组。\n这是一个 promise 链（caches.open() 和 cache.addAll()）。\nevent.waitUntil() 方法带有 promise 参数并使用它来判断安装所花费的时间，以及安装是否成功。")]),e._v(" "),r("p",[e._v("如果所有文件都成功缓存，则将安装 Service Worker。 如有任何文件无法下载，则安装步骤将失败。\n这可让您依赖于所定义的所有资产，但也意味着需要对您决定在安装步骤缓存的文件列表格外留意。\n定义一个过长的文件列表将会增加文件缓存失败的几率，从而导致服务工作线程未能安装。")]),e._v(" "),r("p",[e._v("这仅是一个示例，实际您可以在 install 事件中执行其他任务，或完全避免设置 install 事件侦听器")]),e._v(" "),r("h4",{attrs:{id:"缓存和返回请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存和返回请求"}},[e._v("#")]),e._v(" 缓存和返回请求")]),e._v(" "),r("p",[e._v("您已安装 Service Worker，现在可能会想要返回一个缓存的响应，对吧？")]),e._v(" "),r("p",[e._v("在安装 Service Worker 且用户转至其他页面或刷新当前页面后，Service Worker 将开始接收 fetch 事件。下面提供了一个示例")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  self.addEventListener('fetch', function (event) {\n    console.log(event);\n    event.respondWith(\n      caches.match(event.request).then(function (response) {\n        // Cache hit - return response\n        if (response) {\n          return response\n        }\n        return fetch(event.request)\n      })\n    )\n  })\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br")])]),r("p",[e._v("这里我们定义了 fetch 事件，并且在 event.respondWith() 中，我们传入来自 caches.match() 的一个 promise。\n此方法检视该请求，并从服务工作线程所创建的任何缓存中查找缓存的结果。")]),e._v(" "),r("p",[e._v("如果发现匹配的响应，则返回缓存的值，否则，将调用 fetch 以发出网络请求，并将从网络检索到的任何数据作为结果返回。\n这是一个简单的例子，它使用了在安装步骤中缓存的所有资产。")]),e._v(" "),r("p",[e._v("如果希望连续缓存新请求，可以通过处理 fetch 请求的响应并将其添加到缓存来实现，如下所示")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  self.addEventListener('fetch', function(event) {\n    event.respondWith(\n      caches.match(event.request)\n        .then(function(response) {\n          // Cache hit - return response\n          if (response) {\n            return response;\n          }\n\n          // IMPORTANT:Clone the request. A request is a stream and\n          // can only be consumed once. Since we are consuming this\n          // once by cache and once by the browser for fetch, we need\n          // to clone the response.\n          var fetchRequest = event.request.clone();\n\n          return fetch(fetchRequest).then(\n            function(response) {\n              // Check if we received a valid response\n              if(!response || response.status !== 200 || response.type !== 'basic') {\n                return response;\n              }\n\n              // IMPORTANT:Clone the response. A response is a stream\n              // and because we want the browser to consume the response\n              // as well as the cache consuming the response, we need\n              // to clone it so we have two streams.\n              var responseToCache = response.clone();\n\n              caches.open(CACHE_NAME)\n                .then(function(cache) {\n                  cache.put(event.request, responseToCache);\n                });\n\n              return response;\n            }\n          );\n        })\n      );\n  });\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br"),r("span",{staticClass:"line-number"},[e._v("18")]),r("br"),r("span",{staticClass:"line-number"},[e._v("19")]),r("br"),r("span",{staticClass:"line-number"},[e._v("20")]),r("br"),r("span",{staticClass:"line-number"},[e._v("21")]),r("br"),r("span",{staticClass:"line-number"},[e._v("22")]),r("br"),r("span",{staticClass:"line-number"},[e._v("23")]),r("br"),r("span",{staticClass:"line-number"},[e._v("24")]),r("br"),r("span",{staticClass:"line-number"},[e._v("25")]),r("br"),r("span",{staticClass:"line-number"},[e._v("26")]),r("br"),r("span",{staticClass:"line-number"},[e._v("27")]),r("br"),r("span",{staticClass:"line-number"},[e._v("28")]),r("br"),r("span",{staticClass:"line-number"},[e._v("29")]),r("br"),r("span",{staticClass:"line-number"},[e._v("30")]),r("br"),r("span",{staticClass:"line-number"},[e._v("31")]),r("br"),r("span",{staticClass:"line-number"},[e._v("32")]),r("br"),r("span",{staticClass:"line-number"},[e._v("33")]),r("br"),r("span",{staticClass:"line-number"},[e._v("34")]),r("br"),r("span",{staticClass:"line-number"},[e._v("35")]),r("br"),r("span",{staticClass:"line-number"},[e._v("36")]),r("br"),r("span",{staticClass:"line-number"},[e._v("37")]),r("br"),r("span",{staticClass:"line-number"},[e._v("38")]),r("br"),r("span",{staticClass:"line-number"},[e._v("39")]),r("br")])]),r("p",[e._v("执行的操作如下：")]),e._v(" "),r("p",[e._v("1、在 fetch 请求中添加对 .then() 的回调。\n2、获得响应后，执行以下检查：")]),e._v(" "),r("ul",[r("li",[e._v("确保响应有效。")]),e._v(" "),r("li",[e._v("检查并确保响应的状态为 200。")]),e._v(" "),r("li",[e._v("确保响应类型为 basic，亦即由自身发起的请求。 这意味着，对第三方资产的请求也不会添加到缓存。")])]),e._v(" "),r("p",[e._v("3、如果通过检查，则克隆响应。 这样做的原因在于，该响应是数据流， 因此主体只能使用一次。\n由于我们想要返回能被浏览器使用的响应，并将其传递到缓存以供使用，\n因此需要克隆一份副本。我们将一份发送给浏览器，另一份则保留在缓存。")]),e._v(" "),r("h4",{attrs:{id:"更新-service-worker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更新-service-worker"}},[e._v("#")]),e._v(" 更新 Service Worker")]),e._v(" "),r("p",[e._v("在某个时间点，您的 Service Worker 需要更新。 此时，您需要遵循以下步骤：")]),e._v(" "),r("p",[e._v("1、更新您的服务工作线程 JavaScript 文件。 用户导航至您的站点时，浏览器会尝试在后台重新下载定义 Service Worker 的脚本文件。 如果 Service Worker 文件与其当前所用文件存在字节差异，则将其视为_新 Service Worker_。")]),e._v(" "),r("p",[e._v("2、新 Service Worker 将会启动，且将会触发 install 事件。")]),e._v(" "),r("p",[e._v("3、此时，旧 Service Worker 仍控制着当前页面，因此新 Service Worker 将进入 waiting 状态。")]),e._v(" "),r("p",[e._v("4、当网站上当前打开的页面关闭时，旧 Service Worker 将会被终止，新 Service Worker 将会取得控制权。")]),e._v(" "),r("p",[e._v("5、新 Service Worker 取得控制权后，将会触发其 activate 事件。")])])}),[],!1,null,null,null);s.default=a.exports}}]);