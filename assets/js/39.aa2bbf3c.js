(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{396:function(s,t,a){"use strict";a.r(t);var n=a(25),i=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[s._v("#")]),s._v(" 概览")]),s._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/git/flow-path.png",alt:"alt 属性文本"}})]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("在日常的Git操作中，我们通常只需要掌握一小部分简单的命令，如下图所示的六个命令即可：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/git/command.png",alt:"alt 属性文本"}})]),s._v(" "),a("h2",{attrs:{id:"常用的git命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的git命令"}},[s._v("#")]),s._v(" 常用的Git命令")]),s._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),a("p",[s._v("Git提供了一个名为git config的工具，用于设置控制Git外观和行为的配置变量。安装完Git后，第一件事就是设置用户名和邮件地址，这些信息会被写入每次的提交中，且不可更改。")]),s._v(" "),a("p",[s._v("设置提交代码时的用户信息命令如下：")]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git config [--global] user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[name]"')]),s._v("\ngit config [--global] user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[email address]"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[s._v("#")]),s._v(" 启动")]),s._v(" "),a("p",[s._v("一个Git项目可以通过两种方式初始化：")]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git init [project-name]: 在当前目录创建或初始化一个Git代码库。\ngit clone url: 克隆一个项目及其整个代码历史。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[s._v("#")]),s._v(" 基本操作")]),s._v(" "),a("p",[s._v("在日常工作中，常用的基本操作如下：")]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git init                       # 初始化仓库，默认为 master 分支\ngit add .                      # 提交全部文件修改到缓存区\ngit add <具体某个文件路径+全名> # 提交某些文件到缓存区\ngit diff                       # 查看当前代码 add 后，会 add 哪些内容\ngit diff --staged              # 查看现在 commit 提交后，会提交哪些内容\ngit status                     # 查看当前分支状态\ngit pull <远程仓库名> <远程分支名>   # 拉取远程仓库的分支与本地当前分支合并\ngit pull <远程仓库名> <远程分支名>:<本地分支名> # 拉取远程仓库的分支与本地某个分支合并\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<注释>"')]),s._v("         # 提交代码到本地仓库，并写提交注释\ngit commit -v                  # 提交时显示所有diff信息\ngit commit --amend [file1] [file2]  # 重做上一次commit，并包括指定文件的新变化\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("关于提交信息的格式，可以遵循以下规则：")]),s._v(" "),a("ul",[a("li",[s._v("feat: 新特性，添加功能")]),s._v(" "),a("li",[s._v("fix: 修改bug")]),s._v(" "),a("li",[s._v("refactor: 代码重构")]),s._v(" "),a("li",[s._v("docs: 文档修改")]),s._v(" "),a("li",[s._v("style: 代码格式修改，注意不是CSS修改")]),s._v(" "),a("li",[s._v("test: 测试用例修改")]),s._v(" "),a("li",[s._v("chore: 其他修改，比如构建流程，依赖管理")])]),s._v(" "),a("h3",{attrs:{id:"分支操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[s._v("#")]),s._v(" 分支操作")]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git branch              # 查看本地所有分支\ngit branch -r           # 查看远程所有分支\ngit branch -a           # 查看本地和远程所有分支\ngit merge <分支名>      # 合并分支\ngit merge --abort       # 合并分支出现冲突时，取消合并，回到合并前的状态\ngit branch <新分支名>   # 基于当前分支，新建一个分支\ngit checkout --orphan <新分支名>  # 新建一个空分支（会保留之前分支的所有文件）\ngit branch -D <分支名>   # 删除本地某个分支\ngit push <远程库名> :<分支名>  # 删除远程某个分支\ngit branch <新分支名称> <提交ID>  # 从提交历史恢复某个删除的分支\ngit branch -m <原分支名> <新分支名>  # 分支更名\ngit checkout <分支名>   # 切换到本地某个分支\ngit checkout <远程库名>/<分支名>  # 切换到线上某个分支\ngit checkout -b <新分支名>  # 基于当前分支新建分支，并切换为这个分支\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"远程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[s._v("#")]),s._v(" 远程同步")]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git fetch [remote]        # 下载远程仓库的所有变动\ngit remote -v             # 显示所有远程仓库\ngit pull [remote] [branch]  # 拉取远程仓库的分支与本地当前分支合并\ngit fetch                 # 获取线上最新版信息记录，不合并\ngit push [remote] [branch]  # 上传本地指定分支到远程仓库\ngit push [remote] --force  # 强行推送当前分支到远程仓库，即使有冲突\ngit push [remote] --all    # 推送所有分支到远程仓库\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[s._v("#")]),s._v(" 撤销")]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git checkout [file]                  # 恢复暂存区的指定文件到工作区\ngit checkout [commit] [file]         # 恢复某个commit的指定文件到暂存区和工作区\ngit checkout .                      # 恢复暂存区的所有文件到工作区\ngit reset [commit]                   # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\ngit reset --hard                     # 重置暂存区与工作区，与上一次commit保持一致\ngit reset [file]                     # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\ngit revert [commit]                  # 后者的所有变化都将被前者抵消，并应用到当前分支\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"存储操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储操作"}},[s._v("#")]),s._v(" 存储操作")]),s._v(" "),a("p",[s._v("当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作，但又不想提交这些杂乱的代码，这时候可以将代码进行存储。")]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash                  # 暂时将未提交的变化移除\ngit stash pop              # 取出储藏中最后存入的工作状态进行恢复，并删除储藏\ngit stash list             # 查看所有储藏中的工作\ngit stash apply <储藏的名称>  # 取出储藏中对应的工作状态进行恢复，不会删除储藏\ngit stash clear            # 清空所有储藏中的工作\ngit stash drop <储藏的名称>   # 删除对应的某个储藏\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"常用命令速查表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令速查表"}},[s._v("#")]),s._v(" 常用命令速查表")]),s._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/git/quick-search.png",alt:"alt 属性文本"}})])])}),[],!1,null,null,null);t.default=i.exports}}]);