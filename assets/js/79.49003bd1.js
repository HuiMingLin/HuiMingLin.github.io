(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{436:function(a,e,p){"use strict";p.r(e);var t=p(25),l=Object(t.a)({},(function(){var a=this,e=a.$createElement,p=a._self._c||e;return p("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[p("p",[a._v("WeakMap 是 JavaScript 中的一种内置对象，它提供了一种键-值对的存储方式。与普通的 Map 对象不同，WeakMap 的键只能是对象，并且对于不再被引用的键，其对应的值会被自动回收，不会造成内存泄漏。WeakMap 的主要应用场景是在需要存储一些临时数据或私有数据，并且不希望影响垃圾回收的情况下使用。")]),a._v(" "),p("p",[a._v("下面是 WeakMap 的一些特点和原理：")]),a._v(" "),p("ul",[p("li",[p("p",[a._v("只接受对象作为键：WeakMap 的键只能是对象，不能是基本数据类型（如字符串、数值等）。这是因为 WeakMap 使用对象的引用作为键，当对象不再被引用时，垃圾回收机制可以自动清理与之相关的键值对。")])]),a._v(" "),p("li",[p("p",[a._v("弱引用特性：WeakMap 中的键是弱引用的，这意味着当键对象不再被引用时，垃圾回收机制可以自动清理与之相关的键值对。在没有其他引用的情况下，键对象会被垃圾回收，并从 WeakMap 中删除对应的键值对。")])]),a._v(" "),p("li",[p("p",[a._v("不可迭代：由于 WeakMap 的键是弱引用的，垃圾回收机制可以在任何时候删除键值对，因此 WeakMap 不支持迭代操作，也没有相关的迭代器方法（如 keys()、values()、entries() 和 forEach()）。")])]),a._v(" "),p("li",[p("p",[a._v("没有公开的方法和属性：WeakMap 没有提供直接访问和操作键值对的方法和属性。只能通过 set()、get() 和 delete() 方法来操作键值对。")])])]),a._v(" "),p("p",[a._v("需要注意的是，由于 WeakMap 的键是弱引用的，因此无法遍历键值对，也无法获知具体的键。WeakMap 主要用于存储一些临时数据或私有数据，当对应的对象不再被引用时，相关的键值对会被自动清理，减少了内存占用。在开发中，可以利用 WeakMap 来实现对象的私有属性或缓存数据等场景。")])])}),[],!1,null,null,null);e.default=l.exports}}]);