import{_ as e,c as i,o as a,a1 as n}from"./chunks/framework.DwaB85k5.js";const t="/assets/image.Bdah_UKS.png",b=JSON.parse('{"title":"vite","description":"","frontmatter":{},"headers":[],"relativePath":"domain/engineering/build/vite/index.md","filePath":"domain/engineering/build/vite/index.md","lastUpdated":1721634173000}'),r={name:"domain/engineering/build/vite/index.md"},d=n('<h1 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h1><h2 id="vite-dev-server" tabindex="-1">Vite Dev Server <a class="header-anchor" href="#vite-dev-server" aria-label="Permalink to &quot;Vite Dev Server&quot;">​</a></h2><p>读取到 main.tsx 文件的内容之后，Vite 会对文件的内容进行编译，大家可以从 Chrome 的网络调试面板看到编译后的结果:</p><p><img src="'+t+`" alt="alt text"></p><p>vite 会将项目的源代码编译成浏览器可以识别的代码，与此同时，一个 import 语句即代表了一个 HTTP 请求，如下面两个 import 语句:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/src/index.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/src/App.tsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述两个语句则分别代表了两个不同的请求，Vite Dev Server 会读取本地文件，返回浏览器可以解析的代码。当浏览器解析到新的 import 语句，又会发出新的请求，以此类推，直到所有的资源都加载完成。</p><p>Vite 所倡导的 no-bundle 理念的真正含义: 利用浏览器原生 ES 模块的支持，实现开发阶段的 Dev Server 进行模块的按需加载，而不是先整体打包再进行加载。相比 Webpack 这种必须打包再加载的传统构建模式，Vite 在开发阶段省略了繁琐且耗时的打包过程，这也是它为什么快的一个重要原因。</p><h2 id="css-工程化" tabindex="-1">CSS 工程化 <a class="header-anchor" href="#css-工程化" aria-label="Permalink to &quot;CSS 工程化&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/css">CSS 工程化</a></div><h2 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/code-specification">代码规范</a></div><h2 id="静态资源" tabindex="-1">静态资源 <a class="header-anchor" href="#静态资源" aria-label="Permalink to &quot;静态资源&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/assets">静态资源</a></div><h2 id="预构建" tabindex="-1">预构建 <a class="header-anchor" href="#预构建" aria-label="Permalink to &quot;预构建&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/pre-build/index">预构建</a></div><h2 id="双引擎架构" tabindex="-1">双引擎架构 <a class="header-anchor" href="#双引擎架构" aria-label="Permalink to &quot;双引擎架构&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/dual-engine-architecture/index">双引擎架构</a></div><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/plugin/index">插件</a></div><h2 id="hmr" tabindex="-1">HMR <a class="header-anchor" href="#hmr" aria-label="Permalink to &quot;HMR&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/hmr/index">HMR</a></div><h2 id="code-splitting" tabindex="-1">Code Splitting <a class="header-anchor" href="#code-splitting" aria-label="Permalink to &quot;Code Splitting&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/code-splitting/index">Code Splitting</a></div><h2 id="polyfill" tabindex="-1">Polyfill <a class="header-anchor" href="#polyfill" aria-label="Permalink to &quot;Polyfill&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/polyfill/index">Polyfill</a></div><h2 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/ssr/index">SSR</a></div><h2 id="module-federation" tabindex="-1">Module Federation <a class="header-anchor" href="#module-federation" aria-label="Permalink to &quot;Module Federation&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/module-federation/index">Module Federation</a></div><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><div><a href="/domain/engineering/build/vite/performance/index">性能优化</a></div>`,32),s=[d];function l(o,h,p,c,u,v){return a(),i("div",null,s)}const g=e(r,[["render",l]]);export{b as __pageData,g as default};
